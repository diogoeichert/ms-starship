"use strict";

/* global core2d */

const { Color, Point, Core2D } = core2d;

const ANALOG_TRESHOLD = 0.5;
const ANIMATED_TILE_IMAGES = 8;
const AUTO_SCALE = true;
const BIG_EXPLOSION_FRAME_TTL = 10;
const BIG_KISS_SHOT_SPEED = 8;
const BIG_STAR_DENSITY = 50;
const BIG_STAR_SIZE = 2;
const DEFAULT_FILL_STYLE = rgb(0, 0, 0);
const DEFAULT_POINTS = 1;
const ENEMY_SHOT_CHANCE = 128;
const ENEMY_SHOT_SPEED = 6;
const ENEMY_SPAWN_CHANCE = 64;
const EXTRA_LIFE_POINTS = 1000;
const FLOWER_HORIZONTAL_SPEED = 2;
const FLOWER_MAX_BOUNCE_SPEED = 5;
const FONT_SIZE = 8;
const FRAME_DURATION = 30;
const HINT_TTL = 500;
const HUD_HEIGHT = 40;
const LIPSTICK_X_SPEED = 2;
const LIPSTICK_Y_SPEED = 6;
const MAX_BIG_KISS_SHOTS = 2;
const MAX_FRIENDS = 4;
const MAX_LIVES = 9;
const MAX_LIPSTICK_SHOTS = 1;
const MAX_NORMAL_SHOTS = 2;
const MAX_PLAYERS = 2;
const MIN_PLAYERS = 1;
const MAX_MINT_SHOTS = 3;
const MAX_TTL_WITHOUT_ENEMY = 32;
const MUMMY_MAX_VERTICAL_SPEED = 4;
const MUMMY_STEP_TTL = 6;
const NAME = "Ms. Starship";
const NORMAL_SHOT_SPEED = 16;
const PANEL_MARGIN = 1;
const PLANE_HORIZONTAL_SPEED = -4;
const PLANE_MAX_VERTICAL_SPEED = 4;
const PLANE_VERTICAL_ACCELERATION = 0.10;
const PLAYER_BOX_X = 4;
const PLAYER_BOX_Y = 11;
const PLAYER_BOX_WIDTH = 24;
const PLAYER_BOX_HEIGHT = 18;
const PLAYER_FRAME_TTL = 5;
const PLAYER_INVINCIBILITY_TIME = 64;
const PLAYER_LIVES = 2;
const PLAYER_MAX_SPEED = 10;
const PLAYER_MIN_SPEED = 3;
const PLAYER_PATH_PRECISION = 8;
const PLAYER_START_X = 32;
const PLAYER_START_Y = 32;
const POWER_DROP_CHANCE = 3;
const SMALL_STAR_DENSITY = 50;
const SMALL_STAR_SIZE = 1;
const SPLASH_EXPLOSION_FRAME_TTL = 16;
const STAR_BLINK_CHANCE = 20;
const STAR_COLORS = [rgb(192, 255, 255), rgb(255, 192, 255), rgb(255, 255, 192)];
const START_STAGE = 0;
const START_SECTION = 0;
const MINT_SHOT_SPEED = 18;
const TILE_SIZE = 24;
const TITLE_TTL = 304;
const TRANSITION_STEP = 16;
const WHITESPACE = 8;

let startSection = START_SECTION;

const AxisEnum = {
	"LEFT_X" : 0,
	"LEFT_Y" : 1,
	"RIGHT_X" : 2,
	"RIGHT_Y" : 3
};

const BossEnum = {
	"SHIP": 0,
	"SKULL" : 1,
	"SPHINX" : 2,
	"SUBMARINE" : 3,
	"UNDERWATER" : 4,
	"ZEPPELIN" : 5
};

const BossShotEnum = {
	"ARROW" : 0,
	"BALL": 1,
	"RAY" : 2,
	"SIGHT" : 3
};

const ButtonEnum = {
	"A" : 0,
	"B" : 1,
	"X" : 2,
	"Y" : 3,
	"L1" : 4,
	"R1" : 5,
	"L2" : 6,
	"R2" : 7,
	"SELECT" : 8,
	"START" : 9,
	"L3" : 10,
	"R3" : 11,
	"UP" : 12,
	"DOWN" : 13,
	"LEFT" : 14,
	"RIGHT" : 15
};

const CommandEnum = {
	"UP" : 0,
	"DOWN" : 1,
	"LEFT" : 2,
	"RIGHT" : 3,
	"FIRE" : 4,
	"ENABLE" : 5,
	"START" : 6,
	"MUTE" : 7
};

const EnemyEnum = {
	"BUBBLE": 0,
	"DRILL": 1,
	"FISH" : 2,
	"FISH_WITH_SPLASH" : 3,
	"FLOWER" : 4,
	"GHOST" : 5,
	"MUMMY" : 6,
	"PLANE" : 7,
	"ROCKET" : 8,
	"SKULL" : 9,
	"SNAKE" : 10
};

const ExplosionEnum = {
	"SMALL" : 0,
	"SPLASH" : 1,
	"BIG" : 2,
	"HUGE" : 3
};

const KeyEnum = {
	"SPACE" : 32,
	"LEFT" : 37,
	"UP" : 38,
	"RIGHT" : 39,
	"DOWN" : 40,
	"A" : 65,
	"D" : 68,
	"I" : 73,
	"J" : 74,
	"K" : 75,
	"L" : 76,
	"M" : 77,
	"N" : 78,
	"P" : 80,
	"Q" : 81,
	"S" : 83,
	"W" : 87,
	"F11" : 122
};

const LayerEnum = {
	"BACKGROUND" : 0,
	"BEHIND" : 1,
	"GROUND" : 2,
	"LOOT" : 3,
	"ENEMIES" : 4,
	"SMOKE" : 5,
	"PLAYERS" : 6,
	"PROJECTILES" : 7,
	"FRONT" : 8,
	"HUD" : 9
};

const PlacementEnum = {
	"NONE" : 0,
	"FRONT" : 1,
	"BACK" : 2,
	"TOP" : 3,
	"BOTTOM" : 4
};

const PlayerShotEnum = {
	"NORMAL" : 0,
	"LIPSTICK" : 1,
	"BIG_KISS" : 2,
	"MINT" : 3
};

const PowerEnum = {
	"RED_BUOY" : 0
};

const SectionEnum = {
	"BOSS" : 0,
	"SPACE" : 1,
	"TILE_MAP" : 2
};

const StateEnum = {
	"AIMING" : 0,
	"ENTERING" : 1,
	"FIRING" : 2,
	"GOING_UP" : 3,
	"GOING_DOWN" : 4,
	"GOING_LEFT" : 5,
	"GOING_RIGHT" : 6,
	"RELOADING" : 7,
	"THINKING" : 8,
	"TURNING" : 9,
	"WAITING" : 10,
	"WALKING" : 11
};

const WeaponEnum = {
	"NONE" : 0,
	"NORMAL" : 1,
	"SPEED_UP" : 2,
	"SPEED_DOWN" : 3,
	"LIPSTICK" : 4,
	"BIG_KISS" : 5,
	"MINT" : 6,
	"FRIEND" : 7,
	"UMBRELLA" : 8
};

const BossToClassMap = {};
BossToClassMap[BossEnum.SHIP] = ShipBoss;
BossToClassMap[BossEnum.SKULL] = SkullBoss;
BossToClassMap[BossEnum.SPHINX] = SphinxBoss;
BossToClassMap[BossEnum.SUBMARINE] = SubmarineBoss;
BossToClassMap[BossEnum.UNDERWATER] = UnderwaterBoss;
BossToClassMap[BossEnum.ZEPPELIN] = ZeppelinBoss;

const BossShotToClassMap = {};
BossShotToClassMap[BossShotEnum.ARROW] = ArrowBossShot;
BossShotToClassMap[BossShotEnum.BALL] = BallBossShot;
BossShotToClassMap[BossShotEnum.RAY] = RayBossShot;
BossShotToClassMap[BossShotEnum.SIGHT] = SightBossShot;

const ButtonToCommandMap = {};
ButtonToCommandMap[ButtonEnum.UP] = CommandEnum.UP;
ButtonToCommandMap[ButtonEnum.DOWN] = CommandEnum.DOWN;
ButtonToCommandMap[ButtonEnum.LEFT] = CommandEnum.LEFT;
ButtonToCommandMap[ButtonEnum.RIGHT] = CommandEnum.RIGHT;
ButtonToCommandMap[ButtonEnum.A] = CommandEnum.FIRE;
ButtonToCommandMap[ButtonEnum.B] = CommandEnum.ENABLE;
ButtonToCommandMap[ButtonEnum.START] = CommandEnum.START;
ButtonToCommandMap[ButtonEnum.SELECT] = CommandEnum.MUTE;

const EnemyToClassMap = {};
EnemyToClassMap[EnemyEnum.BUBBLE] = BubbleEnemy;
EnemyToClassMap[EnemyEnum.DRILL] = DrillEnemy;
EnemyToClassMap[EnemyEnum.FISH] = FishEnemy;
EnemyToClassMap[EnemyEnum.FISH_WITH_SPLASH] = FishEnemyWithSplash;
EnemyToClassMap[EnemyEnum.FLOWER] = FlowerEnemy;
EnemyToClassMap[EnemyEnum.GHOST] = GhostEnemy;
EnemyToClassMap[EnemyEnum.MUMMY] = MummyEnemy;
EnemyToClassMap[EnemyEnum.PLANE] = PlaneEnemy;
EnemyToClassMap[EnemyEnum.ROCKET] = RocketEnemy;
EnemyToClassMap[EnemyEnum.SKULL] = SkullEnemy;
EnemyToClassMap[EnemyEnum.SNAKE] = SnakeEnemy;

const ExplosionToClassMap = {};
ExplosionToClassMap[ExplosionEnum.SMALL] = SmallExplosion;
ExplosionToClassMap[ExplosionEnum.SPLASH] = SplashExplosion;
ExplosionToClassMap[ExplosionEnum.BIG] = BigExplosion;
ExplosionToClassMap[ExplosionEnum.HUGE] = HugeExplosion;

const KeyToCommandMap = {};
KeyToCommandMap[KeyEnum.UP] = CommandEnum.UP;
KeyToCommandMap[KeyEnum.W] = CommandEnum.UP;
KeyToCommandMap[KeyEnum.I] = CommandEnum.UP;
KeyToCommandMap[KeyEnum.DOWN] = CommandEnum.DOWN;
KeyToCommandMap[KeyEnum.S] = CommandEnum.DOWN;
KeyToCommandMap[KeyEnum.K] = CommandEnum.DOWN;
KeyToCommandMap[KeyEnum.LEFT] = CommandEnum.LEFT;
KeyToCommandMap[KeyEnum.A] = CommandEnum.LEFT;
KeyToCommandMap[KeyEnum.J] = CommandEnum.LEFT;
KeyToCommandMap[KeyEnum.RIGHT] = CommandEnum.RIGHT;
KeyToCommandMap[KeyEnum.D] = CommandEnum.RIGHT;
KeyToCommandMap[KeyEnum.L] = CommandEnum.RIGHT;
KeyToCommandMap[KeyEnum.SPACE] = CommandEnum.FIRE;
KeyToCommandMap[KeyEnum.M] = CommandEnum.ENABLE;
KeyToCommandMap[KeyEnum.P] = CommandEnum.START;
KeyToCommandMap[KeyEnum.Q] = CommandEnum.MUTE;

const PlayerShotToClassMap = {};
PlayerShotToClassMap[PlayerShotEnum.NORMAL] = NormalShot;
PlayerShotToClassMap[PlayerShotEnum.LIPSTICK] = LipstickShot;
PlayerShotToClassMap[PlayerShotEnum.BIG_KISS] = BigKissShot;
PlayerShotToClassMap[PlayerShotEnum.MINT] = MintShot;

const PowerToClassMap = {};
PowerToClassMap[PowerEnum.RED_BUOY] = RedBuoy;

const SectionToClassMap = {};
SectionToClassMap[SectionEnum.BOSS] = BossSection;
SectionToClassMap[SectionEnum.SPACE] = SpaceSection;
SectionToClassMap[SectionEnum.TILE_MAP] = TilemapSection;

const StateToMethodNameMap = {};
StateToMethodNameMap[StateEnum.AIMING] = "aim";
StateToMethodNameMap[StateEnum.ENTERING] = "enter";
StateToMethodNameMap[StateEnum.FIRING] = "fire";
StateToMethodNameMap[StateEnum.GOING_UP] = "goUp";
StateToMethodNameMap[StateEnum.GOING_DOWN] = "goDown";
StateToMethodNameMap[StateEnum.GOING_LEFT] = "goLeft";
StateToMethodNameMap[StateEnum.GOING_RIGHT] = "goRight";
StateToMethodNameMap[StateEnum.RELOADING] = "reload";
StateToMethodNameMap[StateEnum.THINKING] = "think";
StateToMethodNameMap[StateEnum.TURNING] = "turn";
StateToMethodNameMap[StateEnum.WAITING] = "wait";
StateToMethodNameMap[StateEnum.WALKING] = "walk";

const WeaponToClassMap = {};
WeaponToClassMap[WeaponEnum.NORMAL] = NormalWeapon;
WeaponToClassMap[WeaponEnum.LIPSTICK] = LipstickWeapon;
WeaponToClassMap[WeaponEnum.BIG_KISS] = BigKissWeapon;
WeaponToClassMap[WeaponEnum.MINT] = MintWeapon;

const WeaponToNameMap = {};
WeaponToNameMap[WeaponEnum.NONE] = "";
WeaponToNameMap[WeaponEnum.BIG_KISS] = "big kiss";
WeaponToNameMap[WeaponEnum.FRIEND] = "friend";
WeaponToNameMap[WeaponEnum.LIPSTICK] = "lipstick";
WeaponToNameMap[WeaponEnum.NORMAL] = "normal";
WeaponToNameMap[WeaponEnum.SPEED_DOWN] = "slow down";
WeaponToNameMap[WeaponEnum.SPEED_UP] = "speed up";
WeaponToNameMap[WeaponEnum.MINT] = "mint";
WeaponToNameMap[WeaponEnum.UMBRELLA] = "umbrella";

const WeaponToPlacementMap = {};
WeaponToPlacementMap[WeaponEnum.BIG_KISS] = PlacementEnum.FRONT;
WeaponToPlacementMap[WeaponEnum.FRIEND] = PlacementEnum.NONE;
WeaponToPlacementMap[WeaponEnum.LIPSTICK] = PlacementEnum.BOTTOM;
WeaponToPlacementMap[WeaponEnum.NORMAL] = PlacementEnum.FRONT;
WeaponToPlacementMap[WeaponEnum.SPEED_DOWN] = PlacementEnum.NONE;
WeaponToPlacementMap[WeaponEnum.SPEED_UP] = PlacementEnum.NONE;
WeaponToPlacementMap[WeaponEnum.MINT] = PlacementEnum.FRONT;
WeaponToPlacementMap[WeaponEnum.UMBRELLA] = PlacementEnum.NONE;

const StageData = [
	{ // Stage #0
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(0, 64, 32)
			},

			{
				"fraction" : 1,
				"color" : rgb(32, 128, 64)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FLOWER],

				"tilemap" : [ // 15 tiles max height
					["02"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH, EnemyEnum.PLANE],

				"tilemap" : [
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH, EnemyEnum.PLANE],

				"tilemap" : [
					["03"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.PLANE],

				"tilemap" : [ // 15 tiles max height
					["02"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"]
				]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH, EnemyEnum.PLANE],

				"tilemap" : [
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"],
					["01"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SUBMARINE,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH, EnemyEnum.PLANE],

				"tilemap" : [
					["03"]
				]
			}
		]
	},

	{ // Stage #1
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(0, 32, 64)
			},

			{
				"fraction" : 1,
				"color" : rgb(32, 64, 128)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.PLANE],

				"tilemap" : [
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00","","","","", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00", "00","","", "00", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.DRILL],

				"tilemap" : [
					["00"],
					["00"],
					["00"],
					["00", "00"],
					["00", "00"],
					["00", "00", "00"],
					["00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","","", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00"],
					["00", "00", "00"],
					["00", "00", "00"],
					["00", "00"],
					["00", "00"],
					["00", "00"],
					["00", "00"],
					["00"],
					["00"],
					["00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","", "00", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00","", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00"],
					["00"],
					["00"],
					["00", "00"],
					["00", "00"],
					["00", "00", "00"],
					["00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","","", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00","","", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00","", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00"],
					["00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00"],
					["00", "00"],
					["00", "00"],
					["00"],
					["00", "00", "00"],
					["00"],
					["00"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 2
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 2
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 2
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FLOWER],

				"tilemap" : [
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00","","","","", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00", "00","","", "00", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.DRILL],

				"tilemap" : [
					["00"],
					["00"],
					["00"],
					["00", "00"],
					["00", "00"],
					["00", "00", "00"],
					["00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","","", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00"],
					["00", "00", "00"],
					["00", "00", "00"],
					["00", "00"],
					["00", "00"],
					["00", "00"],
					["00", "00"],
					["00"],
					["00"],
					["00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","","", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","","", "00", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","","", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","","","","","", "00", "00", "00", "00"],
					["","","","","","","","","","","","","","","","","","","", "00","", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00"],
					["00"],
					["00"],
					["00", "00"],
					["00", "00"],
					["00", "00", "00"],
					["00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","","", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","","", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00","","", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00","", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00","","","","","","","","","", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00"],
					["00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00"],
					["00", "00", "00", "00", "00", "00", "00", "00", "00", "00"],
					["00", "00"],
					["00", "00"],
					["00", "00"],
					["00"],
					["00", "00", "00"],
					["00"],
					["00"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 400,
				"enemies" : [EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.ZEPPELIN,
				"enemies" : [EnemyEnum.PLANE]
			}
		]
	},

	{ // Stage #2
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(64, 0, 32)
			},

			{
				"fraction" : 1,
				"color" : rgb(128, 32, 64)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -2,
					"y" : -2
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -4,
					"y" : -4
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY, EnemyEnum.SNAKE],

				"tilemap" : [
					["S1"],
					["S3", "S1"],
					["S3", "S0"],
					["S3", "S0"],
					["S3", "S0"],
					["S3", "S2"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "P8"],
					["S0", "P5"],
					["S0"],
					["S0", "P0"],
					["S0", "P3", "P8"],
					["S0", "P4", "P5"],
					["S0", "P5"],
					["S0"],
					["S0"],
					["S0", "P0"],
					["S0", "P2", "P0"],
					["S0", "P4", "P3", "P8"],
					["S0", "P4", "P4", "P5"],
					["S0", "P4", "P5"],
					["S0", "P5"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","", "P4", "P4"],
					["S0","","","","","","","", "P4", "01"],
					["S0","","","","","","","", "P4", "01"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "01"],
					["S3", "S1","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S0","","","","","","", "P4", "01"],
					["S3", "S2","","","","","","", "P4", "01"],
					["S0","","","","","","","", "P4", "01"],
					["S0","","","","","","","", "P4", "01"],
					["S0","","","","","","","", "P4", "01"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "01"],
					["S0","","","","","","","", "P4", "01"],
					["S0","","","","","","","", "P4", "01"],
					["S0","","","","","","","", "P4", "P4"],
					["S0"],
					["S0"],
					["S0"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.PLANE, EnemyEnum.SNAKE],

				"tilemap" : [
					["S0"],
					["S0"],
					["S0"],
					["S3", "S1"],
					["S3", "S0"],
					["S3", "S3", "S1"],
					["S3", "S3", "S0"],
					["S3", "S3", "S0"],
					["S3", "S3", "S0"],
					["S3", "S3", "S0"],
					["S3", "S3", "S2"],
					["S3", "S0"],
					["S3", "S0"],
					["S3", "S0"],
					["S3", "S0"],
					["S3", "S3", "S1"],
					["S3", "S3", "S2"],
					["S3", "S0"],
					["S3", "S2"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "P4"],
					["S0", "P4"],
					["S0", "P4", "S1"],
					["S0", "P4", "S3", "S1"],
					["S0", "P4", "S3", "S2"],
					["S0", "P4", "S2"],
					["S0", "P4"],
					["S0", "P4", "S1"],
					["S0", "P4", "S2"],
					["S0", "P4"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","", "P4", "P4"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0", "P4","","","","","","", "P4", "S0"],
					["S0", "P4", "P4","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P4", "S0"],
					["S0","","","","","","","", "P4", "S0"],
					["S0", "P4","","","","","","", "P4", "S0"],
					["S0", "P4", "S1","","","","","", "P4", "S2"],
					["S0", "P4", "S2"],
					["S0", "S2"],
					["S0"],
					["S0"],
					["S0", "P4"],
					["S0", "P4"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "P4"],
					["S0", "P4"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "P4"],
					["S0", "P4", "P4"],
					["S0", "P4", "P4"],
					["S0", "P4"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "P8"],
					["S0", "P5"],
					["S0"],
					["S0"],
					["S0","","", "P4"],
					["S0", "P1", "P1", "P4"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY],

				"tilemap" : [
					["S0","","", "P4"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "P0"],
					["S0", "P1", "P0"],
					["S0", "P1", "P1", "P0"],
					["S0", "P1", "P1", "P1", "P0"],
					["S0", "P1", "P1", "P1", "P1", "P0"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P0"],
					["S0", "P1", "P1", "P1", "P1", "P1", "P1", "P0"],
					["S0", "P3", "P2", "P1", "P1", "P1", "P1", "P1", "P0"],
					["S0", "P4", "P4", "P3", "P2", "P1", "P1", "P1", "P1", "P0"]
				]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY],

				"tilemap" : [
					["S0", "P4", "P4", "P4", "P4", "P3", "P2", "P1", "P1", "P1", "P0"],
					["S0", "P4", "P4", "P4", "P4", "P4", "P4", "P3", "P2", "P1", "P1", "P0"],
					["S0", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P3", "P2", "P1", "P0"],
					["S0", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P3", "P2", "P0"],
					["S0", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P4", "P3", "P8"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY, EnemyEnum.FLOWER],

				"tilemap" : [
					["P9"],
					["P2", "P7"],
					["P1", "P3", "P7"],
					["P1", "P2", "P4", "P7"],
					["P1", "P1", "P3", "P4", "P7"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 2
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY, EnemyEnum.FLOWER],

				"tilemap" : [
					["P1", "P1", "P2", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P3", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P2", "P4", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P1", "P3", "P4", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P1", "P2", "P4", "P4", "P4", "P4", "P7"],
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY, EnemyEnum.FLOWER],

				"tilemap" : [
					["P1", "P1", "P1", "P1", "P1", "P3", "P4", "P4", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P1", "P1", "P2", "P4", "P4", "P4", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P1", "P1", "P1", "P3", "P4", "P4", "P4", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P1", "P1", "P1", "P2", "P4", "P4", "P4", "P4", "P4", "P4", "P7"],
					["P1", "P1", "P1", "P1", "P1", "P1", "P1", "P3", "P4", "P4", "P4", "P4", "P4", "P4", "P7"]
				]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY],

				"tilemap" : [
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","","", "P4"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY],

				"tilemap" : [
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["P4", "P4","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4", "P4", "P4"],
					["P4", "01","","","","","", "P4", "P4", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "01","","","","","", "P4"],
					["P4", "P4","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4", "P4", "P4"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.MUMMY],

				"tilemap" : [
					["","","","","","","", "P4", "P4", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"],
					["","","","","","","", "P4"]
				]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.PLANE],

				"tilemap" : [
					["","","","","","","","","","","","","","", "P6"],
					["","","","","","","","","","","","","", "P6", "P1"],
					["","","","","","","","","","","","", "P6", "P1", "P1"],
					["","","","","","","","","","","", "P6", "P1", "P1", "P1"],
					["","","","","","","","","","", "P6", "P1", "P1", "P1", "P1"],
					["","","","","","","","","", "P6", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","","","", "P6", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","","", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","","", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","","","", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"]
				]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.PLANE],

				"tilemap" : [
					["","","","", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","","", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["","", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["", "P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"],
					["P6", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1", "P1"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"enemies" : [EnemyEnum.PLANE],
				"duration" : 500,
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"enemies" : [EnemyEnum.PLANE],
				"duration" : 100,
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.SNAKE],

				"tilemap" : [
					["S1"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"]
				]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SPHINX,
				"enemies" : [EnemyEnum.MUMMY, EnemyEnum.SNAKE]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FLOWER],

				"tilemap" : [
					["S0", "P4", "P4", "P4", "P5"],
					["S0", "P4", "P4", "P5"],
					["S0", "P4", "P5"],
					["S0", "P5"],
					["S2"]
				]
			}
		]
	},

	{ // Stage #3
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(32, 16, 32)
			},

			{
				"fraction" : 1,
				"color" : rgb(64, 32, 64)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"enemies" : [EnemyEnum.FLOWER],
				"duration" : 500
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FLOWER]
			}
		]
	},

	{ // Stage #4
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(0, 0, 138)
			},

			{
				"fraction" : 1,
				"color" : rgb(0, 0, 140)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 500,
				"enemies" : [EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 500,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH],

				"tilemap" : [ // 15 tiles max height
					["01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "03"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SHIP,
				"enemies" : [EnemyEnum.FISH_WITH_SPLASH]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 100,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 100,
				"enemies" : [EnemyEnum.FISH]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : -2
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 500,
				"enemies" : [EnemyEnum.BUBBLE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : -1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.BUBBLE, EnemyEnum.FLOWER],

				"tilemap" : [ // 15 tiles max height
					["S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0", "S0"]
				]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.FLOWER],

				"tilemap" : [
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","", "C2", "C1", "C1"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0","","","","","","","","","", "C2", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","", "C2", "C1", "C1"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0","","","","","","","","","","", "C2", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C2", "C1", "C1", "C1", "C1", "C0","","", "C2", "C1", "C1", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C1", "C1", "C1", "C1", "C1", "C1", "C0","", "C2", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C2", "C1", "C1", "C1", "C1", "C1", "C1", "C0","", "C2", "C1", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C2", "C1", "C1", "C1", "C0","","", "C2", "C1", "C1", "C1", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C1", "C1", "C1", "C1", "C0","","", "C2", "C1", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C2", "C1", "C1", "C1", "C1", "C1", "C0","", "C2", "C1", "C1", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C2", "C1", "C1", "C1", "C1", "C0","", "C2", "C1", "C1", "C1", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","", "C2", "C1", "C1"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0","","","","","","","","","", "C2", "C1", "C1"],
					["S0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","","", "C2", "C1"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0","","","","","","","","","","","", "C2", "C1", "C1"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0","","","","","","","","","","", "C2", "C1", "C1", "C1"],
					["S0"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C1", "C1", "C0"],
					["S0"],
					["S0"],
					["S0", "C0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"],
					["S0"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.UNDERWATER,
				"enemies" : [EnemyEnum.FLOWER]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 500,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.TILE_MAP,

				"tilemap" : [ // 15 tiles max height
					["01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "01", "03"]
				]
			},

			{
				"speed" : {
					"x" : 0,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 500,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			}
		]
	},

	{ // Stage #5
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(0, 8, 32)
			},

			{
				"fraction" : 1,
				"color" : rgb(0, 16, 64)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -1,
					"y" : 1
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 200,
				"enemies" : [EnemyEnum.FLOWER, EnemyEnum.PLANE]
			},

			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.TILE_MAP,
				"enemies" : [EnemyEnum.GHOST, EnemyEnum.SKULL],

				"tilemap" : [
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  "],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  "],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "A1"],
					["A0", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "  ", "A1"],
					["A0", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1"],
					["A0", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "  ", "A1"],
					["A0", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"],
					["A0", "  ", "  ", "A1", "A1", "A1", "A1", "  ", "  ", "  ", "A1", "A1", "A1", "A1", "A1"],
					["A0", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "  ", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1", "A1"],
					["A0", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "  ", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "A1"],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "A1", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
					["A0", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "]
				]
			}
		]
	},

	{ // Stage #5
		"colorStops" : [
			{
				"fraction" : 0,
				"color" : rgb(0, 8, 32)
			},

			{
				"fraction" : 1,
				"color" : rgb(0, 16, 64)
			}
		],

		"sections" : [
			{
				"speed" : {
					"x" : -2,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.BOSS,
				"bossEnum" : BossEnum.SKULL,
				"enemies" : [EnemyEnum.GHOST]
			},

			{
				"speed" : {
					"x" : -1,
					"y" : 0
				},

				"sectionEnum" : SectionEnum.SPACE,
				"duration" : 100
			}
		]
	}
];

const TileData = { // [isAnimated, isFragile, isHollow, isInFront]
	"00" : [true, true, false, false],
	"01" : [true, false, true, true],
	"02" : [true, false, true, true],
	"03" : [true, false, true, true],
	"A0" : [false, false, false, true],
	"A1" : [false, true, false, false],
	"C0" : [false, true, false, false],
	"C1" : [false, true, false, false],
	"C2" : [false, true, false, false],
	"P0" : [false, false, true, false],
	"P1" : [false, false, true, false],
	"P2" : [false, false, true, false],
	"P3" : [false, false, false, false],
	"P4" : [false, false, false, false],
	"P5" : [false, false, true, false],
	"P6" : [false, false, true, false],
	"P7" : [false, false, true, false],
	"P8" : [false, false, true, false],
	"P9" : [false, false, true, false],
	"S0" : [false, false, false, false],
	"S1" : [false, false, true, false],
	"S2" : [false, false, true, false],
	"S3" : [false, false, false, false]
};

const WeaponData = [
	[ // #1 slot
		WeaponEnum.SPEED_UP,
		WeaponEnum.SPEED_DOWN
	],

	[ // #2 slot
		WeaponEnum.LIPSTICK
	],

	[ // #3 slot
		WeaponEnum.BIG_KISS
	],

	[ // #4 slot
		WeaponEnum.MINT
	],

	[ // #5 slot
		WeaponEnum.FRIEND
	],

	[ // #6 slot
		WeaponEnum.UMBRELLA
	]
];

var canvas;
var context;
var input;
var game;
var screen;
var sound;

function Animation(a) {
	this.frames = a;
	this.setFrameIndex(0);
}

Animation.prototype.getHeight = function () {
	return this.frame.getHeight();
};

Animation.prototype.getImage = function () {
	return this.frame.getImage();
};

Animation.prototype.getWidth = function () {
	return this.frame.getWidth();
};

Animation.prototype.setFrameIndex = function (a) {
	this.index = a;
	this.frame = this.frames[this.index];
	this.tick = 0;
};

Animation.prototype.update = function () {
	var a = !1;

	if (++this.tick > this.frame.getTtl()) {
		var b = this.index + 1;
		b == this.frames.length && ((a = !0), (b = 0));
		this.setFrameIndex(b);
	}

	return a;
};

function Frame(a, b) {
	this.image = a;
	this.ttl = b || 0;
}

Frame.prototype.getHeight = function () {
	return this.image.height;
};

Frame.prototype.getImage = function () {
	return this.image;
};

Frame.prototype.getTtl = function () {
	return this.ttl;
};

Frame.prototype.getWidth = function () {
	return this.image.width;
};

function Rect(a, b) {
	this.point = a || new Point();
	this.size = b || new Size();
}

Rect.prototype.getBottom = function () {
	return this.getTop() + this.getHeight();
};

Rect.prototype.getCenter = function () {
	return new Point(this.getCenterX(), this.getCenterY());
};

Rect.prototype.getCenterX = function () {
	return this.getLeft() + Math.floor(this.getWidth() / 2);
};

Rect.prototype.getCenterY = function () {
	return this.getTop() + Math.floor(this.getHeight() / 2);
};

Rect.prototype.getHeight = function () {
	return this.size.getHeight();
};

Rect.prototype.getLeft = function () {
	return this.point.x;
};

Rect.prototype.getRight = function () {
	return this.getLeft() + this.getWidth();
};

Rect.prototype.getTop = function () {
	return this.point.y;
};

Rect.prototype.getWidth = function () {
	return this.size.getWidth();
};

Rect.prototype.isCollision = function (a) {
	return !(this.getLeft() > a.getRight() || this.getRight() < a.getLeft() || this.getTop() > a.getBottom() || this.getBottom() < a.getTop());
};

Rect.prototype.move = function (a, b) {
	this.moveX(a);
	this.moveY(b);
};

Rect.prototype.moveX = function (a) {
	this.point.moveX(a);
};

Rect.prototype.moveY = function (a) {
	this.point.moveY(a);
};

Rect.prototype.setBottom = function (a) {
	this.setTop(a - this.getHeight());
};

Rect.prototype.setCenter = function (point) {
	this.setCenterX(point.x);
	this.setCenterY(point.y);
};

Rect.prototype.setCenterX = function (a) {
	this.setLeft(a - Math.floor(this.getWidth() / 2));
};

Rect.prototype.setCenterY = function (a) {
	this.setTop(a - Math.floor(this.getHeight() / 2));
};

Rect.prototype.setHeight = function (a) {
	this.size.setHeight(a);
};

Rect.prototype.setLeft = function (a) {
	this.point.setX(a);
};

Rect.prototype.setRight = function (a) {
	this.setLeft(a - this.getWidth());
};

Rect.prototype.setTop = function (a) {
	this.point.setY(a);
};

Rect.prototype.setWidth = function (a) {
	this.size.setWidth(a);
};

function Size(a, b) {
	this.width = a || 0;
	this.height = b || 0;
}

Size.prototype.getHeight = function () {
	return this.height;
};

Size.prototype.getWidth = function () {
	return this.width;
};

Size.prototype.resize = function (a, b) {
	this.increaseWidth(a);
	this.increaseHeight(b);
};

Size.prototype.resizeWidth = function (a) {
	this.width += a;
};

Size.prototype.resizeHeight = function (a) {
	this.height += a;
};

Size.prototype.setHeight = function (a) {
	this.height = a;
};

Size.prototype.setWidth = function (a) {
	this.width = a;
};

function Sprite(a) {
	this.animations = a;
	this.setAnimationIndex(0);
	this.rect = new Rect();
	this.rect.setHeight(this.animation.getHeight());
	this.rect.setWidth(this.animation.getWidth());
}

Sprite.prototype.getBottom = function () {
	return this.rect.getBottom();
};

Sprite.prototype.getCenter = function () {
	return this.rect.getCenter();
};

Sprite.prototype.getCenterX = function () {
	return this.rect.getCenterX();
};

Sprite.prototype.getCenterY = function () {
	return this.rect.getCenterY();
};

Sprite.prototype.getHeight = function () {
	return this.rect.getHeight();
};

Sprite.prototype.getImage = function () {
	return this.animation.getImage();
};

Sprite.prototype.getLeft = function () {
	return this.rect.getLeft();
};

Sprite.prototype.getRight = function () {
	return this.rect.getRight();
};

Sprite.prototype.getTop = function () {
	return this.rect.getTop();
};

Sprite.prototype.getWidth = function () {
	return this.rect.getWidth();
};

Sprite.prototype.isCollision = function (a) {
	return this.rect.isCollision(a);
};

Sprite.prototype.move = function (a, b) {
	this.moveX(a);
	this.moveY(b);
};

Sprite.prototype.moveX = function (a) {
	this.rect.moveX(a);
};

Sprite.prototype.moveY = function (a) {
	this.rect.moveY(a);
};

Sprite.prototype.render = function (a) {
	var b = this.getImage(),
		c = this.getLeft(),
		d = this.getTop(),
		e = this.getWidth(),
		f = this.getHeight();
	a.drawImage(b, c, d, e, f);
};

Sprite.prototype.setAnimationIndex = function (a) {
	this.index = a;
	this.animation = this.animations[this.index];
	this.animation.setFrameIndex(0);
};

Sprite.prototype.setBottom = function (a) {
	this.rect.setBottom(a);
};

Sprite.prototype.setCenter = function (point) {
	this.setCenterX(point.x);
	this.setCenterY(point.y);
};

Sprite.prototype.setCenterX = function (a) {
	this.rect.setCenterX(a);
};

Sprite.prototype.setCenterY = function (a) {
	this.rect.setCenterY(a);
};

Sprite.prototype.setLeft = function (a) {
	this.rect.setLeft(a);
};

Sprite.prototype.setRight = function (a) {
	this.rect.setRight(a);
};

Sprite.prototype.setTop = function (a) {
	this.rect.setTop(a);
};

Sprite.prototype.update = function () {
	return this.animation.update();
};

function getElement(id) {
	return document.getElementById(id);
}

function getTime() {
	return new Date().getTime();
}

function random(ceil) {
	return Math.floor(Math.random() * ceil);
}

function rgb(a, b, c) {
	function d(a) {
		a = a.toString(16);
		2 > a.length && (a = "0" + a);
		return a;
	}

	a = "#" + d(a || 0);
	a += d(b || 0);
	return (a += d(c || 0));
}

function boot() {
	const IMAGES = Array.from(document.getElementsByTagName("img"));
	const total = IMAGES.length;
	let complete = 0;

	for (let i = 0; i < total; ++i) {
		const IMAGE = IMAGES[i];

		if (IMAGE.complete) {
			++complete;
		}
	}

	context.fillStyle = "blue";
	context.fillRect(0, 0, canvas.width * complete / total, canvas.height);

	if (complete < total) {
		setTimeout(boot, 100);
		return;
	}

	loop();
}

function loop() {
	var startTime = getTime();
	input.update();
	screen.update();
	sound.update();
	var elapsedTime = getTime() - startTime;
	var interval = FRAME_DURATION - elapsedTime;
	setTimeout(onTimeout, interval);

	function onTimeout() {
		requestAnimationFrame(loop);
	}
}

function createLinearGradient(rect) {
	return context.createLinearGradient(rect.point.x, rect.point.y, rect.size.getWidth(), rect.size.getHeight());
}

function createEnemyShot(point) {
	var enemyShot = new EnemyShot();
	enemyShot.sprite.rect.setCenter(point);
	return enemyShot;
}

function drawImage(point, image, size) {
	if (size) {
		context.drawImage(image, point.x, point.y, size.getWidth(), size.getHeight());
	} else {
		context.drawImage(image, point.x, point.y);
	}
}

function fillRect(rect, fillStyle) {
	if (fillStyle) {
		context.fillStyle = fillStyle;
	}

	context.fillRect(rect.getLeft(), rect.getTop(), rect.getWidth(), rect.getHeight());
}

function write(point, string) {
	string = "" + string;
	point = new Point(point.x, point.y);
	var characters = string.split("");

	for (let i = 0; i < characters.length; ++i) {
		var character = characters[i];

		if (character == " ") {
			point.x += WHITESPACE;
		} else {
			var image = getElement(character + "Font");
			drawImage(point, image);
			point.x += image.width;
		}
	}
}

function writeCenter(y, string) {
	string = "" + string;
	var characters = string.split("");
	var width = 0;

	for (let index in characters) {
		var character = characters[index];

		if (character == " ") {
			width += WHITESPACE;
		} else {
			var characterImage = getElement(character + "Font");
			width += characterImage.width;
		}
	}

	var x = Math.floor((canvas.width - width) / 2);
	write(new Point(x, y), string);
}

function writeLeft(point, string) {
	string = "" + string;
	point = new Point(point.x, point.y);
	var characters = string.split("");

	for (let index = (characters.length - 1); index >= 0; --index) {
		var character = characters[index];

		if (character == " ") {
			point.x -= WHITESPACE;
		} else {
			var characterImage = getElement(character + "Font");
			point.x -= characterImage.width;
			drawImage(point, characterImage);
		}
	}
}

// Game Subsystem
function Game(view) {
	this.view = view;
	this.blink = false;
	this.isPaused = false;
	this.tileFrame = 0;
	this.tick = 0;
	this.xSpeed = 0;
	this.ySpeed = 0;
}

Game.prototype.init = function() {
	this.width = canvas.width;
	this.height = canvas.height - HUD_HEIGHT;
	this.hud = new HUD();
	this.starfield = new Starfield();
	this.story = new Story();
	this.tileSpriteCollection = new SpriteCollection();
	this.hitBoxSpriteCollection = new SpriteCollection();
	this.loot = new Loot();
	this.explosionSpriteCollection = new SpriteCollection();
	this.enemySpriteCollection = new SpriteCollection();
	this.enemyShotSpriteCollection = new SpriteCollection();
	this.bossShotSpriteCollection = new SpriteCollection();
	this.human = new Human();
	this.playerFire = new PlayerFire();
	this.renderer = new Renderer();
};

Game.prototype.die = function() {
	this.human.die();
};

Game.prototype.getWidth = function() {
	return this.width;
};

Game.prototype.getHeight = function() {
	return this.height;
};

Game.prototype.pause = function() {
	this.isPaused = !this.isPaused;

	if (this.isPaused == true) {
		sound.play("pauseSound");
		sound.pause();
	} else {
		sound.resume();
	}
};

Game.prototype.update = function() {
	if (this.isPaused) {
		return;
	}

	this.blink = !this.blink;

	if (++this.tick > PLAYER_FRAME_TTL) {
		this.tick = 0;

		if (++this.tileFrame == ANIMATED_TILE_IMAGES) {
			this.tileFrame = 0;
		}
	}

	if (this.story.update()) {
		const searchParams = new URLSearchParams(location.search);

		if (searchParams.has("games") && JSON.parse(searchParams.get("games")).includes("starship")) {
			this.view.next = GoodEndingView;
		} else {
			this.view.next = BadEndingView;
		}

		this.die();
		return true;
	}

	if (!window.REGISTERED && this.story.level > SMALL_STAR_SIZE) {
		this.view.next = SharewareView;
		this.die();
		return true;
	}

	this.starfield.update();
	this.tileSpriteCollection.update();
	this.explosionSpriteCollection.update();
	this.loot.update();
	this.enemySpriteCollection.update();
	this.hitBoxSpriteCollection.update();
	this.enemyShotSpriteCollection.update();
	this.bossShotSpriteCollection.update();

	if (this.human.update()) {
		sound.fadeOut();
		return true;
	}

	this.playerFire.update();
	this.renderer.render();
	this.hud.update();
};

function HUD() {
	this.rect = new Rect(new Point(0, canvas.height - HUD_HEIGHT), new Size(canvas.width, HUD_HEIGHT));
	this.tick = 0;
}

HUD.prototype.render = function() {
	fillRect(this.rect, DEFAULT_FILL_STYLE);

	if (game.human.players.length < 2 && Math.floor(this.tick++ / 24) % 2) {
		if (game.human.players.length && game.human.players[0].number) {
			write(new Point(2, 391), "player 1 - join now");
		} else {
			write(new Point(490, 391), "player 2 - join now");
		}
	}
};

HUD.prototype.update = function() {
	game.renderer.push(LayerEnum.HUD, this);

	for (let i in game.human.players) {
		var player = game.human.players[i];
		game.renderer.push(LayerEnum.HUD, player.panel);
	}
};

function Panel(player) {
	this.player = player;
	this.charge = 0;
	this.loadedWeaponEnum;
	this.chargeImage = getElement("charge");
	this.enabledImage = getElement("enabled");
	this.image = getElement("panel");
	var point = new Point(game.hud.rect.getLeft() + PANEL_MARGIN, game.hud.rect.point.y + PANEL_MARGIN);
	this.rect = new Rect(point, new Size(this.image.width, this.image.height));

	if (this.player.number > 0) {
		this.rect.setRight(game.getWidth() - PANEL_MARGIN);
	}

	this.livesPoint = new Point(this.rect.getLeft(), this.rect.point.y + 17);
	this.playerIconPoint = new Point(this.livesPoint.x + 16, this.livesPoint.y);
	this.playerIcon = getElement("playerIcon" + this.player.number);
	this.display;
	this.displayPoint = new Point(this.rect.getRight() - 3, this.livesPoint.y);
	this.scorePoint = new Point(this.rect.getRight(), this.rect.point.y + 30);
	this.isNeedingRefresh = false;
	this.unload();
}

Panel.prototype.chargeUp = function() {
	if (++this.charge > 6) {
		this.charge = 1;
	}

	this.refresh();
};

Panel.prototype.discharge = function() {
	this.charge = 0;
};

Panel.prototype.drawCharge = function() {
	var position = this.charge - 1;
	var point = new Point(this.rect.getLeft(), this.rect.getTop());
	point.x += position * (this.chargeImage.width + 4);

	if (this.display.length > 0) {
		drawImage(point, this.chargeImage);
	} else {
		drawImage(point, this.enabledImage);
	}

	writeLeft(this.displayPoint, this.display);
};

Panel.prototype.enable = function() {
	if (this.charge > 0 && this.loadedWeaponEnum) {
		this.discharge();
		this.player.equipment.enable(this.loadedWeaponEnum);
		this.unload();
		sound.play("enableSound");
	}
};

Panel.prototype.refresh = function() {
	if (this.charge == 0) {
		return;
	}

	this.unload();
	var slot = WeaponData[this.charge - 1];

	for (let i = 0; i < slot.length; ++i) {
		var weaponEnum = slot[i];

		if (!this.player.equipment.arms.hasWeapon(weaponEnum)) {
			this.loadedWeaponEnum = weaponEnum;
			break;
		}
	}

	if (this.charge == 1) {
		if (this.player.speed == PLAYER_MAX_SPEED) {
			this.loadedWeaponEnum = WeaponEnum.SPEED_DOWN;
		}
	}

	if (this.charge == 5) {
		if (this.player.equipment.friends.length == MAX_FRIENDS) {
			this.loadedWeaponEnum = WeaponEnum.NONE;
		}
	}

	if (this.charge == 6) {
		if (this.player.equipment.umbrella != null) {
			this.loadedWeaponEnum = WeaponEnum.NONE;
		}
	}

	this.display = WeaponToNameMap[this.loadedWeaponEnum];
};

Panel.prototype.render = function() {
	drawImage(this.rect.point, this.image);

	if (this.charge > 0) {
		this.drawCharge();
	}

	write(this.livesPoint, "" + (this.player.number + 1) + "p x" + this.player.lives);
	drawImage(this.playerIconPoint, this.playerIcon);
	writeLeft(this.scorePoint, this.player.score);
};

Panel.prototype.setNeedsRefresh = function() {
	this.isNeedingRefresh = true;
};

Panel.prototype.unload = function() {
	this.loadedWeaponEnum = WeaponEnum.NONE;
	this.display = WeaponToNameMap[this.loadedWeaponEnum];
};

Panel.prototype.update = function() {
	if (this.isNeedingRefresh) {
		this.isNeedingRefresh = false;
		this.refresh();
	}
};

function Story(loop, level) {
	this.loop = loop || 0;
	this.level = level || START_STAGE - 1;
	this.stage = null;
}

Story.prototype.update = function() {
	if (!this.stage || this.stage.update()) {
		if (++this.level == StageData.length) {
			return true;
		}

		this.stage = new Stage(StageData[this.level]);

		if (this.level == START_STAGE) {
			sound.stopTheme();
		}

		sound.playTheme(this.level + "Theme");
	}
};

function Stage(data, checkpoint) {
	this.data = data;
	this.background = new Background(new Rect(new Point(), new Size(game.getWidth(), game.getHeight())), DEFAULT_FILL_STYLE);
	var colorStops = [];

	for (let i in this.data.colorStops) {
		var rawColorStop = this.data.colorStops[i];
		var colorStop = new ColorStop(rawColorStop.fraction, rawColorStop.color);
		colorStops.push(colorStop);
	}

	this.background.setFillStyle(new LinearGradient(new Rect(new Point(), new Size(canvas.width, canvas.height)), colorStops));
	this.checkpoint = checkpoint || (startSection - 1);
	this.section = null;

	if (startSection > 0) {
		startSection = 0;
	}
}

Stage.prototype.update = function() {
	if (!this.section || this.section.update()) {
		if (++this.checkpoint == this.data.sections.length) {
			return true;
		}

		this.section = new Section(this.data.sections[this.checkpoint]);
	}

	game.renderer.push(LayerEnum.BACKGROUND, this.background);
};

function Section(data) {
	this.data = data;
	game.xSpeed = data.speed.x || 0;
	game.ySpeed = data.speed.y || 0;
	this.delegate = new SectionToClassMap[data.sectionEnum](this.data);
	this.lastEnemySpawn = 0;
	this.tick = 0;
}

Section.prototype.update = function() {
	if (this.data.duration && this.tick > this.data.duration || this.delegate.update()) {
		return true;
	}

	if (this.data.enemies && (this.tick == 0 || ++this.lastEnemySpawn > MAX_TTL_WITHOUT_ENEMY || random(ENEMY_SPAWN_CHANCE) == 0)) {
		var enemyEnum = this.data.enemies[random(this.data.enemies.length)];
		new Enemy(enemyEnum);
		this.lastEnemySpawn = 0;
	}

	++this.tick;
};

function BossSection(data) {
	this.data = data;
	this.boss = new Boss(data.bossEnum);
}

BossSection.prototype.update = function() {
	if (this.boss.update()) {
		return true;
	}
};

function SpaceSection(data) {
	this.data = data;
}

SpaceSection.prototype.update = function() {
};

function TilemapSection(data) {
	this.data = data;
	this.builder = new Builder(this.data.tilemap);
}

TilemapSection.prototype.update = function() {
	if (this.builder.update()) {
		return true;
	}
};

function Human() {
	this.players = [new Player(0, input.getCandidate())];
}

Human.prototype.add = function() {
	for (let i = 0; i < MAX_PLAYERS; ++i) {
		if (!this.players[i] || this.players[i].number) {
			this.players.push(new Player(i, input.getCandidate()));
		}
	}
};

Human.prototype.die = function() {
	for (let i in this.players) {
		var player = this.players[i];
		this.remove(player);
	}
};

Human.prototype.getTarget = function() {
	return this.players[random(this.players.length)].sprite.rect.getCenter();
};

Human.prototype.reorder = function() {
	if (this.players.length > 1 && this.players[this.players.length - 1].sprite.rect.point.y < this.players[0].sprite.rect.point.y && !this.players[0].isDying && (game.blink || this.players[0].invincibility < 1)) {
		game.renderer.push(LayerEnum.PLAYERS, this.players[0].sprite);
	}
};

Human.prototype.remove = function(player) {
	player.controller.release();
};

Human.prototype.update = function() {
	if (this.players.length < MIN_PLAYERS) {
		return true;
	}

	if (this.players.length < MAX_PLAYERS && input.hasCandidate()) {
		this.add();
	}

	var survivors = [];

	for (let i in this.players) {
		var player = this.players[i];

		if (player.update()) {
			this.remove(player);
			continue;
		}

		survivors.push(player);

		if (game.loot.isCollision(player.box)) {
			player.collect(game.loot.getLastPowerEnum());
		}

		if (player.invincibility > 0) {
			continue;
		}

		var collision = game.bossShotSpriteCollection.getCollision(player.box) || game.enemyShotSpriteCollection.getCollision(player.box) || game.enemySpriteCollection.getCollision(player.box);

		if (collision) {
			collision.wound();
			player.die();
		}

		var hitBox = game.hitBoxSpriteCollection.getCollision(player.box);

		if (hitBox) {
			player.die();
		}

		var tile = game.tileSpriteCollection.getCollision(player.box);

		if (tile && !tile.isHollow) {
			tile.wound();
			player.die();
		}
	}

	this.players = survivors;
	this.reorder();
};

function Player(number, controller) {
	this.number = number;
	this.controller = controller;
	this.equipment = null;
	this.invincibility = PLAYER_INVINCIBILITY_TIME;
	this.isDying = false;
	this.lives = PLAYER_LIVES;
	this.panel = new Panel(this);
	this.path = [];
	this.score = 0;
	this.speed = 0;

	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("player" + this.number + "0"), PLAYER_FRAME_TTL),
			new Frame(getElement("player" + this.number + "1"), PLAYER_FRAME_TTL)
		])
	]);

	this.sprite.rect.setLeft(PLAYER_START_X);
	this.sprite.rect.setTop(PLAYER_START_Y);

	for (let i = 0; i < PLAYER_PATH_PRECISION * MAX_FRIENDS; ++i) {
		this.path.push(new Point(this.sprite.rect.getLeft(), this.sprite.rect.getTop()));
	}

	this.box = new Rect(new Point(), new Size(PLAYER_BOX_WIDTH, PLAYER_BOX_HEIGHT));
	this.rise();
}

Player.prototype.collect = function() {
	this.panel.chargeUp();
	this.scoreUp();
};

Player.prototype.hit = function() {
	this.scoreUp();
};

Player.prototype.lifeUp = function() {
	if (++this.lives > MAX_LIVES) {
		this.lives = MAX_LIVES;
	}

	sound.play("lifeSound");
};

Player.prototype.fire = function() {
	this.equipment.fire();
};

Player.prototype.die = function() {
	if (this.isDying || this.invincibility > 0) {
		return;
	}

	this.panel.discharge();
	this.invincibility = PLAYER_INVINCIBILITY_TIME;
	this.isDying = true;
	this.playerExplosion = new PlayerExplosion();
	this.playerExplosion.sprite.rect.setCenter(this.sprite.rect.getCenter());
};

Player.prototype.enable = function() {
	this.panel.enable();
};

Player.prototype.goLeft = function() {
	this.sprite.rect.point.x -= this.speed;

	if (this.sprite.rect.getLeft() < 0) {
		this.sprite.rect.setLeft(0);
	}
};

Player.prototype.goRight = function() {
	this.sprite.rect.point.x += this.speed;

	if (this.sprite.rect.getRight() > game.getWidth()) {
		this.sprite.rect.setRight(game.getWidth());
	}
};

Player.prototype.goUp = function() {
	this.sprite.rect.point.y -= this.speed;

	if (this.sprite.rect.getTop() < 0) {
		this.sprite.rect.setTop(0);
	}
};

Player.prototype.goDown = function() {
	this.sprite.rect.point.y += this.speed;

	if (this.sprite.rect.getBottom() > game.getHeight()) {
		this.sprite.rect.setBottom(game.getHeight());
	}
};

Player.prototype.render = function() {
	if (this.invincibility < 1 || game.blink) {
		this.sprite.render(context);
	}
};

Player.prototype.respond = function() {
	var hasMoved = false;

	if (this.controller.active[CommandEnum.LEFT] && !this.controller.active[CommandEnum.RIGHT]) {
		this.goLeft();
		hasMoved = true;
	} else if (this.controller.active[CommandEnum.RIGHT] && !this.controller.active[CommandEnum.LEFT]) {
		this.goRight();
		hasMoved = true;
	}

	if (this.controller.active[CommandEnum.UP] && !this.controller.active[CommandEnum.DOWN]) {
		this.goUp();
		hasMoved = true;
	} else if (this.controller.active[CommandEnum.DOWN] && !this.controller.active[CommandEnum.UP]) {
		this.goDown();
		hasMoved = true;
	}

	if (this.controller.held[CommandEnum.FIRE]) {
		this.special();
	}

	if (this.controller.active[CommandEnum.FIRE] && !this.controller.held[CommandEnum.FIRE]) {
		this.fire();
	}

	if (this.controller.active[CommandEnum.ENABLE] && !this.controller.held[CommandEnum.ENABLE]) {
		this.enable();
	}

	if (hasMoved) {
		this.updatePath();
	}
};

Player.prototype.rise = function() {
	this.equipment = new Equipment(this);
	this.isDying = false;
	this.speed = PLAYER_MIN_SPEED;
};

Player.prototype.scoreUp = function(points) {
	points = points || DEFAULT_POINTS;

	for (let i = 0; i < points; ++i) {
		if (++this.score % EXTRA_LIFE_POINTS == 0) {
			this.lifeUp();
		}
	}
};

Player.prototype.special = function() {
	this.equipment.special();
};

Player.prototype.update = function() {
	if (this.isDying) {
		if (this.playerExplosion.update()) {
			if (this.lives < 1) {
				return true;
			}

			--this.lives;
			this.rise();
		}

		return;
	}

	if (this.invincibility > 0) {
		--this.invincibility;
	}

	this.respond();
	this.box.setLeft(this.sprite.rect.getLeft() + PLAYER_BOX_X);
	this.box.setTop(this.sprite.rect.getTop() + PLAYER_BOX_Y);
	this.equipment.update();
	this.panel.update();
	this.sprite.update();
	game.renderer.push(LayerEnum.PLAYERS, this);
};

Player.prototype.updatePath = function() {
	var point = new Point(this.sprite.rect.getLeft(), this.sprite.rect.getTop());
	this.path.unshift(point);
	this.path.pop();
	this.equipment.setNeedsFriendsPositionUpdate();
};

function Equipment(owner) {
	this.owner = owner;
	this.friends = [];
	this.arms = new Arms(this);
	this.enable(WeaponEnum.NORMAL);
	// DEBUG WEAPONS
	// this.enable(WeaponEnum.SPEED_UP);
	// this.enable(WeaponEnum.SPEED_UP);
	// this.enable(WeaponEnum.LIPSTICK);
	// this.enable(WeaponEnum.BIG_KISS);
	// this.enable(WeaponEnum.MINT);
	// this.enable(WeaponEnum.FRIEND);
	// this.enable(WeaponEnum.FRIEND);
	// this.enable(WeaponEnum.UMBRELLA);
	this.needsFriendsPositionUpdate = false;
	this.umbrella;
}

Equipment.prototype.enable = function(weaponEnum) {
	if (weaponEnum == WeaponEnum.SPEED_UP) {
		var player = this.owner;
		++player.speed;
		sound.play("enableSpeedUpSound");
		return;
	}

	if (weaponEnum == WeaponEnum.SPEED_DOWN) {
		this.owner.speed = PLAYER_MIN_SPEED;
		sound.play("enableSlowDown");
		return;
	}

	if (weaponEnum == WeaponEnum.FRIEND) {
		let friend = new Friend(this, this.friends.length);
		this.friends.push(friend);
		sound.play("enableFriendSound");
		return;
	}

	if (weaponEnum == WeaponEnum.UMBRELLA) {
		this.umbrella = new Umbrella(this);
		sound.play("enableUmbrellaSound");
		return;
	}

	switch (weaponEnum) {
	case WeaponEnum.BIG_KISS:
		sound.play("enableBigKissSound");
		break;

	case WeaponEnum.LIPSTICK:
		sound.play("enableLipstickSound");
		break;

	case WeaponEnum.MINT:
		sound.play("enableMintSound");
		break;
	}

	if (WeaponToPlacementMap[weaponEnum] != PlacementEnum.NONE) {
		this.arms.plug(weaponEnum);

		for (let i in this.friends) {
			let friend = this.friends[i];
			friend.equipment.arms.plug(weaponEnum);
		}
	}
};

Equipment.prototype.fire = function() {
	this.arms.fire();

	for (let i in this.friends) {
		var friend = this.friends[i];
		friend.fire();
	}
};

Equipment.prototype.hit = function() {
	this.owner.hit();
};

Equipment.prototype.setNeedsFriendsPositionUpdate = function() {
	this.needsFriendsPositionUpdate = true;
};

Equipment.prototype.special = function() {
	this.arms.special();

	for (let i in this.friends) {
		var friend = this.friends[i];
		friend.special();
	}
};

Equipment.prototype.update = function() {
	this.arms.update();

	if (this.needsFriendsPositionUpdate) {
		this.needsFriendsPositionUpdate = false;
		this.updateFriendsPosition();
	}

	if (this.umbrella && this.umbrella.update()) {
		this.umbrella = null;
		this.owner.panel.setNeedsRefresh();
	}

	for (let i in this.friends) {
		var friend = this.friends[i];
		friend.update();
	}
};

Equipment.prototype.updateFriendsPosition = function() {
	for (let i in this.friends) {
		var friend = this.friends[i];
		var player = this.owner;
		var index = ((friend.number + 1) * PLAYER_PATH_PRECISION) - 1;
		friend.sprite.rect.setLeft(player.path[index].x);
		friend.sprite.rect.setTop(player.path[index].y);
	}
};

function Arms(owner) {
	this.owner = owner;
	this.weapons = {};
}

Arms.prototype.fire = function() {
	for (let i in this.weapons) {
		var weapon = this.weapons[i];
		weapon.fire();
	}
};

Arms.prototype.hasWeapon = function(weaponEnum) {
	var placement = WeaponToPlacementMap[weaponEnum];

	if (this.weapons[placement] && this.weapons[placement].weaponEnum == weaponEnum) {
		return true;
	}
};

Arms.prototype.hit = function() {
	this.owner.hit();
};

Arms.prototype.plug = function(weaponEnum) {
	this.weapons[WeaponToPlacementMap[weaponEnum]] = new Weapon(this, weaponEnum);
};

Arms.prototype.remove = function(weaponEnum) {
	if (this.weapons[weaponEnum]) {
		delete this.weapons[weaponEnum];
	}
};

Arms.prototype.special = function() {
	for (let i in this.weapons) {
		var weapon = this.weapons[i];
		weapon.special();
	}
};

Arms.prototype.update = function() {
	for (let i in this.weapons) {
		var weapon = this.weapons[i];
		weapon.update();
	}
};

function Friend(owner, number) {
	this.owner = owner;
	this.number = number;
	this.equipment = new FriendEquipment(this);
	this.updateArms();
	var equipment = this.owner;
	var player = equipment.owner;
	var index = ((this.number + 1) * PLAYER_PATH_PRECISION) - 1;

	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("friend" + player.number + "0"), PLAYER_FRAME_TTL),
			new Frame(getElement("friend" + player.number + "1"), PLAYER_FRAME_TTL)
		])
	]);

	this.sprite.rect.setLeft(player.path[index].x);
	this.sprite.rect.setTop(player.path[index].y);
}

Friend.prototype.fire = function() {
	this.equipment.fire();
};

Friend.prototype.hit = function() {
	this.owner.hit();
};

Friend.prototype.special = function() {
	this.equipment.special();
};

Friend.prototype.update = function() {
	this.equipment.update();
	this.sprite.update();
	game.renderer.push(LayerEnum.PLAYERS, this.sprite);
};

Friend.prototype.updateArms = function() {
	for (let i in this.owner.arms.weapons) {
		var weapon = this.owner.arms.weapons[i];
		this.equipment.arms.plug(weapon.weaponEnum);
	}
};

function FriendEquipment(owner) {
	this.owner = owner;
	this.arms = new Arms(this);
}

FriendEquipment.prototype.fire = function() {
	this.arms.fire();
};

FriendEquipment.prototype.hit = function() {
	this.owner.hit();
};

FriendEquipment.prototype.special = function() {
	this.arms.special();
};

FriendEquipment.prototype.update = function() {
	this.arms.update();
};

function Umbrella(owner) {
	this.owner = owner;
	this.hits = 10;
	this.isDying = false;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("umbrella0"))]),
		new Animation([new Frame(getElement("umbrella1"))])
	]);

	sound.play("umbrellaSound");
}

Umbrella.prototype.die = function() {
	this.isDying = true;
	sound.play("missSound");
	var explosion = new Explosion(ExplosionEnum.SMALL, false);
	explosion.delegate.sprite.rect.point = this.sprite.rect.point;
	sound.play("enemyExplosionSound");
};

Umbrella.prototype.hit = function() {
	if (--this.hits < 1) {
		this.die();
		return;
	}

	if (this.hits == 1) {
		this.sprite.update();
	}
};

Umbrella.prototype.update = function() {
	if (this.isDying) {
		return true;
	}

	var equipment = this.owner;
	var player = equipment.owner;
	this.sprite.rect.setLeft(player.sprite.rect.getLeft() + 27);
	this.sprite.rect.setTop(player.sprite.rect.getTop() - 12);
	var enemyShot = game.enemyShotSpriteCollection.getCollision(this.sprite.rect);

	if (enemyShot) {
		enemyShot.wound();
		this.hit();
	}

	var enemy = game.enemySpriteCollection.getCollision(this.sprite.rect);

	if (enemy) {
		enemy.wound();
		this.hit();
	}

	var bossShot = game.bossShotSpriteCollection.getCollision(this.sprite.rect);

	if (bossShot) {
		bossShot.wound();
		this.die();
	}

	game.renderer.push(LayerEnum.PLAYERS, this.sprite);
};

function PlayerFire() {
	this.collection = new SpriteCollection();
}

PlayerFire.prototype.push = function(element) {
	this.collection.push(element);
};

PlayerFire.prototype.update = function() {
	this.collection.update();
};

function Weapon(owner, weaponEnum) {
	this.owner = owner;
	this.counter = 0;
	this.delegate = new WeaponToClassMap[weaponEnum](this);
	this.isFiring = false;
	this.weaponEnum = weaponEnum;
}

Weapon.prototype.fire = function() {
	this.isFiring = true;
};

Weapon.prototype.hit = function() {
	this.owner.hit();
};

Weapon.prototype.lower = function() {
	if (--this.counter == 0) {
		this.isFiring = false;
		this.isReloading = false;
	}
};

Weapon.prototype.special = function() {
	if (this.delegate.special) {
		this.delegate.special();
	}
};

Weapon.prototype.update = function() {
	if (this.isFiring && !this.isReloading) {
		if (this.counter < this.delegate.maxShots) {
			++this.counter;
			var playerShot = new PlayerShot(this, this.delegate.playerShotEnum);
			var arms = this.owner;
			var equipment = arms.owner;
			var character = equipment.owner;
			var point = character.sprite.rect.point;
			playerShot.delegate.sprite.rect.point = new Point(point.x + this.delegate.xOffset, point.y + this.delegate.yOffset);
			playerShot.delegate.sprite.rect.point.x -= playerShot.delegate.xSpeed;
			playerShot.delegate.sprite.rect.point.y -= playerShot.delegate.ySpeed;
			game.playerFire.push(playerShot);

			if (this.delegate.sound) {
				sound.play(this.delegate.sound);
			}
		} else {
			if (this.delegate.needsReload) {
				this.isReloading = true;
			}
		}

		if (!this.delegate.isAuto) {
			this.isFiring = false;
		}
	}
};

function NormalWeapon() {
	this.maxShots = MAX_NORMAL_SHOTS;
	this.playerShotEnum = PlayerShotEnum.NORMAL;
	this.sound = "kissSound";
	this.xOffset = 22 - 3;
	this.yOffset = 23 - 2;
}

function LipstickWeapon() {
	this.maxShots = MAX_LIPSTICK_SHOTS;
	this.playerShotEnum = PlayerShotEnum.LIPSTICK;
	this.xOffset = 22;
	this.yOffset = 23 + 8;
}

function BigKissWeapon() {
	this.maxShots = MAX_BIG_KISS_SHOTS;
	this.playerShotEnum = PlayerShotEnum.BIG_KISS;
	this.sound = "bigKissSound";
	this.xOffset = 22 - 3;
	this.yOffset = 23 - 1;
}

function MintWeapon(owner) {
	this.owner = owner;
	this.maxShots = MAX_MINT_SHOTS;
	this.isAuto = true;
	this.needsReload = true;
	this.playerShotEnum = PlayerShotEnum.MINT;
	this.sound = "mintSound";
	this.xOffset = 22 - 1;
	this.yOffset = 23 - 2;
}

function PlayerShot(owner, playerShotEnum) {
	this.owner = owner;
	this.delegate = new PlayerShotToClassMap[playerShotEnum]();
}

PlayerShot.prototype.hit = function() {
	this.owner.hit();
};

PlayerShot.prototype.update = function() {
	if (this.delegate.update()) {
		this.owner.lower();
		return true;
	}

	if (this.delegate.sprite.rect.getLeft() > canvas.width) {
		this.owner.lower();
		return true;
	}

	var collision = game.enemySpriteCollection.getCollision(this.delegate.sprite) || game.hitBoxSpriteCollection.getCollision(this.delegate.sprite) || game.tileSpriteCollection.getCollision(this.delegate.sprite);

	if (collision && !collision.isHollow) {
		if (collision.wound()) {
			this.hit();
		}

		this.owner.lower();
		return true;
	}

	game.renderer.push(LayerEnum.PROJECTILES, this.delegate);
};

function NormalShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("normalShot"))])
	]);

	this.xSpeed = NORMAL_SHOT_SPEED;
	this.ySpeed = 0;
	sound.play("kissSound");
}

NormalShot.prototype.render = function() {
	this.sprite.render(context);
};

NormalShot.prototype.update = function() {
	this.sprite.rect.point.x += this.xSpeed;
};

function LipstickShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("lipstick0"))]),
		new Animation([new Frame(getElement("lipstick1"))])
	]);

	this.shadowBox = new Rect();
	this.shadowBox.setWidth(this.sprite.rect.getWidth());
	this.shadowBox.setHeight(1);
	this.xSpeed = LIPSTICK_X_SPEED;
	this.ySpeed = LIPSTICK_Y_SPEED;
}

LipstickShot.prototype.fall = function() {
	this.sprite.setAnimationIndex(0);
	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.rect.point.y += this.ySpeed;

	if (this.sprite.rect.getTop() > game.getHeight()) {
		return true;
	}
};

LipstickShot.prototype.glide = function() {
	this.sprite.setAnimationIndex(1);
	this.sprite.rect.point.x += this.xSpeed * 2;
};

LipstickShot.prototype.render = function() {
	this.sprite.render(context);
};

LipstickShot.prototype.update = function() {
	this.shadowBox.setLeft(this.sprite.rect.getLeft());
	this.shadowBox.setTop(this.sprite.rect.getBottom() + 8);
	var collision = game.tileSpriteCollection.getCollision(this.shadowBox);

	if (collision && !collision.isHollow) {
		this.glide();
	} else {
		return this.fall();
	}
};

function BigKissShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("bigKiss"))])
	]);

	this.bottomSprite = new Sprite([
		new Animation([new Frame(getElement("bigKissBottom"))])
	]);

	this.topSprite = new Sprite([
		new Animation([new Frame(getElement("bigKissTop"))])
	]);

	this.xSpeed = BIG_KISS_SHOT_SPEED;
	this.breadthIncrement = 2;
	this.ySpeed = this.breadthIncrement / -2;
	sound.play("bigKissSound");
}

BigKissShot.prototype.render = function() {
	this.sprite.render(context);
	this.bottomSprite.render(context);
	this.topSprite.render(context);
};

BigKissShot.prototype.update = function() {
	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.rect.point.y += this.ySpeed;
	this.sprite.rect.size.height += this.breadthIncrement;
	this.bottomSprite.rect.setLeft(this.sprite.rect.getLeft());
	this.bottomSprite.rect.setTop(this.sprite.rect.getBottom());
	this.topSprite.rect.setLeft(this.sprite.rect.getLeft());
	this.topSprite.rect.setBottom(this.sprite.rect.getTop());
};

function MintShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("mintShot"))])
	]);

	this.xSpeed = MINT_SHOT_SPEED;
	this.ySpeed = 0;
}

MintShot.prototype.render = function() {
	this.sprite.render(context);
};

MintShot.prototype.update = function() {
	this.sprite.rect.point.x += this.xSpeed;
};

function PlayerExplosion() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("playerExplosion0"), PLAYER_FRAME_TTL),
			new Frame(getElement("playerExplosion1"), PLAYER_FRAME_TTL),
			new Frame(getElement("playerExplosion2"), PLAYER_FRAME_TTL),
			new Frame(getElement("playerExplosion3"), PLAYER_FRAME_TTL)
		])
	]);

	sound.play("playerExplosionSound");
}

PlayerExplosion.prototype.update = function() {
	if (this.sprite.update() == true) {
		return true;
	}

	game.renderer.push(LayerEnum.PLAYERS, this.sprite);
};

// Loot
function Loot() {
	this.collection = new SpriteCollection();
	this.lastPower = null;
}

Loot.prototype.isCollision = function(rect) {
	for (let i in this.collection.elements) {
		var element = this.collection.elements[i];

		if (rect.isCollision(element.delegate.sprite)) {
			this.lastPower = element.power;
			element.kill();
			return true;
		}
	}

	return false;
};

Loot.prototype.getLastPowerEnum = function() {
	var lastPowerEnum = this.lastPowerEnum;
	this.lastPowerEnum = null;
	return lastPowerEnum;
};

Loot.prototype.push = function(element) {
	this.collection.push(element);
};

Loot.prototype.update = function() {
	this.collection.update();
};

function Power() {
	this.isDying = false;
	this.power = PowerEnum.RED_BUOY;
	this.delegate = new PowerToClassMap[this.power]();
}

Power.prototype.kill = function() {
	this.isDying = true;
};

Power.prototype.update = function() {
	if (this.isDying) {
		this.delegate.die();
		return true;
	}

	this.delegate.sprite.rect.point.x += game.xSpeed;
	this.delegate.sprite.rect.point.y += game.ySpeed;
	game.renderer.push(LayerEnum.LOOT, this.delegate.sprite);
};

function RedBuoy() {
	this.power = WeaponEnum.SPEED_UP;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("redBuoy"))])
	]);
}

RedBuoy.prototype.die = function() {
	sound.play("redBuoySound");
};

// Enemies
function Enemy(enemyEnum) {
	this.delegate = new EnemyToClassMap[enemyEnum](this);
	this.isDying = false;
	game.enemySpriteCollection.push(this);
}

Enemy.prototype.die = function() {
	var enemyRect = this.delegate.sprite;
	var explosion = new Explosion(ExplosionEnum.SMALL, true);
	var explosionRect = explosion.delegate.sprite;
	explosionRect.setCenter(enemyRect.getCenter());
	sound.play("enemyExplosionSound");
};

Enemy.prototype.fire = function() {
	var enemyRect = this.delegate.sprite;

	if (!this.delegate.canFire || enemyRect.getBottom() < 0 || enemyRect.getTop() > game.getHeight()) {
		return;
	}

	createEnemyShot(enemyRect.getCenter());
};

Enemy.prototype.update = function() {
	if (this.isDying) {
		this.die();
		return true;
	}

	this.delegate.sprite.rect.point.x += game.xSpeed;
	this.delegate.sprite.rect.point.y += game.ySpeed;
	this.delegate.update();

	if (this.delegate.sprite.rect.getRight() < 0 || this.delegate.sprite.rect.getLeft() > game.getWidth()) {
		return true;
	}

	if (random(ENEMY_SHOT_CHANCE) == 0) {
		this.fire();
	}

	var layerEnum = LayerEnum.ENEMIES;

	if (this.delegate.layerEnum) {
		layerEnum = this.delegate.layerEnum;
	}

	game.renderer.push(layerEnum, this.delegate.sprite);
};

Enemy.prototype.wound = function() {
	this.isDying = true;
	return true;
};

function BubbleEnemy() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("bubble0"), PLAYER_FRAME_TTL),
			new Frame(getElement("bubble1"), PLAYER_FRAME_TTL),
			new Frame(getElement("bubble0"), PLAYER_FRAME_TTL),
			new Frame(getElement("bubble2"), PLAYER_FRAME_TTL)
		])
	]);

	this.sprite.rect.setTop(game.getHeight());
	this.sprite.rect.setLeft(random(game.getWidth()));
	this.canFire = false;
	this.xAcceleration = -1;
	this.xSpeed = 0;
}

BubbleEnemy.prototype.update = function() {
	this.sprite.rect.point.y -= FLOWER_HORIZONTAL_SPEED;
	this.xSpeed += this.xAcceleration;

	if (Math.abs(this.xSpeed) > FLOWER_MAX_BOUNCE_SPEED) {
		this.xAcceleration = -this.xAcceleration;
	}

	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.update();
};

function DrillEnemy(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("drill0"), 1),
			new Frame(getElement("drill1"), 1)
		]),

		new Animation([
			new Frame(Core2D.image("drill0", true), 1),
			new Frame(Core2D.image("drill1", true), 1)
		]),
	]);

	this.xSpeed = -2;
	this.yAcceleration = 0;
	this.ySpeed = 0;
	this.state = StateEnum.ENTERING;
	this.footBox = new Rect(new Point(), new Size(this.sprite.rect.getWidth(), 1));
	this.handBox = new Rect(new Point(), new Size(1, this.sprite.rect.getHeight() / 2));
	this.sprite.rect.setLeft(random(game.getWidth()));
	this.sprite.rect.setBottom(0);
	this.canFire = true;

	if (game.xSpeed > this.xSpeed && random(3) == 0 && game.tileSpriteCollection.getCollision(new Rect(new Point(0, 0), new Size(1, game.getHeight())))) {
		this.sprite.rect.setRight(0);
		this.turn();
	}

	while (this.sprite.rect.point.y > 0 && game.tileSpriteCollection.getCollision(this.sprite.rect)) {
		this.sprite.rect.point.y -= TILE_SIZE;
	}

	this.sprite.rect.point.y += TILE_SIZE;
	++this.sprite.rect.point.y;
}

DrillEnemy.prototype.correctHeight = function() {
	var collision;

	do {
		--this.sprite.rect.point.y;
		--this.footBox.point.y;
		collision = game.tileSpriteCollection.getCollision(this.footBox);
	} while (collision && !collision.isHollow);

	++this.sprite.rect.point.y;
	++this.footBox.point.y;
};

DrillEnemy.prototype.enter = function() {
	this.correctHeight();
	this.state = StateEnum.WALKING;
};

DrillEnemy.prototype.turn = function() {
	this.xSpeed = -this.xSpeed;

	if (this.xSpeed < 0) {
		this.sprite.setAnimationIndex(0);
	} else {
		this.sprite.setAnimationIndex(1);
	}

	this.state = StateEnum.WALKING;
};

DrillEnemy.prototype.update = function() {
	this.sprite.rect.point.y += this.ySpeed;
	this.footBox.setLeft(this.sprite.rect.getLeft());
	this.footBox.setBottom(this.sprite.rect.getBottom() - 1);
	var collision = game.tileSpriteCollection.getCollision(this.footBox);

	if (!collision || collision.isHollow) {
		if (++this.ySpeed > MUMMY_MAX_VERTICAL_SPEED) {
			this.ySpeed = MUMMY_MAX_VERTICAL_SPEED;
		}
	} else if (this.ySpeed > 0) {
		this.correctHeight();
		this.ySpeed = 0;
	}

	if (this.xSpeed < 0) {
		this.handBox.setLeft(this.sprite.rect.getLeft());
	} else {
		this.handBox.setLeft(this.sprite.rect.getRight());
	}

	this.handBox.setTop(this.sprite.rect.getTop());
	collision = game.tileSpriteCollection.getCollision(this.handBox);

	if (collision && !collision.isHollow) {
		collision.die();
		sound.play("chompSound");
	}

	this[StateToMethodNameMap[this.state]]();
};

DrillEnemy.prototype.walk = function() {
	if (this.ySpeed > 0) {
		return;
	}

	if (random(100) == 0) {
		this.state = StateEnum.TURNING;
	}

	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.update();
};

function FishEnemy() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("fish0"))]),
		new Animation([new Frame(getElement("fish1"))])
	]);

	this.sprite.rect.setLeft(random(game.getWidth()));
	this.sprite.rect.setTop(game.getHeight());
	this.canFire = true;
	this.layerEnum = LayerEnum.BEHIND;
	this.xSpeed = 0 - random(4);
	this.ySpeed = 0 - random(4) - 8;
}

FishEnemy.prototype.update = function() {
	this.ySpeed += 0.5;
	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.rect.point.y += Math.floor(this.ySpeed);

	if (this.ySpeed > 0 && this.sprite.index == 0) {
		this.sprite.setAnimationIndex(1);
	}
};

function FishEnemyWithSplash() {
	var enemy = new FishEnemy();
	var explosion = new Explosion(ExplosionEnum.SPLASH, false);
	explosion.delegate.sprite.rect.setCenterX(enemy.sprite.rect.getCenterX());
	explosion.delegate.sprite.rect.setBottom(game.getHeight() - 16);
	return enemy;
}

function FlowerEnemy() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("flower0"), PLAYER_FRAME_TTL),
			new Frame(getElement("flower1"), PLAYER_FRAME_TTL),
			new Frame(getElement("flower2"), PLAYER_FRAME_TTL),
			new Frame(getElement("flower3"), PLAYER_FRAME_TTL)
		])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setTop(random(game.getHeight()));
	this.canFire = true;
	this.yAcceleration = -1;
	this.ySpeed = 0;
}

FlowerEnemy.prototype.update = function() {
	this.sprite.rect.point.x -= FLOWER_HORIZONTAL_SPEED;
	this.ySpeed += this.yAcceleration;

	if (Math.abs(this.ySpeed) > FLOWER_MAX_BOUNCE_SPEED) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.sprite.rect.point.y += this.ySpeed;
	this.sprite.update();
};

function GhostEnemy() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("ghost0"), 4),
			new Frame(getElement("ghost1"), 4),
			new Frame(getElement("ghost2"), 4),
			new Frame(getElement("ghost3"), 4),
			new Frame(getElement("ghost4"), 4),
			new Frame(getElement("ghost5"), 4),
			new Frame(getElement("ghost6"), 4)
		])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setTop(random(game.getHeight()));
	this.canFire = true;
	this.yAcceleration = -1;
	this.ySpeed = 0;
}

GhostEnemy.prototype.update = function() {
	this.sprite.rect.point.x -= FLOWER_HORIZONTAL_SPEED;
	this.ySpeed += this.yAcceleration;

	if (Math.abs(this.ySpeed) > FLOWER_MAX_BOUNCE_SPEED) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.sprite.rect.point.y += this.ySpeed;
	this.sprite.update();
};

function MummyEnemy(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("mummy0"), MUMMY_STEP_TTL),
			new Frame(getElement("mummy1"), MUMMY_STEP_TTL)
		]),

		new Animation([
			new Frame(getElement("mummy2"), MUMMY_STEP_TTL)
		]),

		new Animation([
			new Frame(getElement("mummy3"), MUMMY_STEP_TTL),
			new Frame(getElement("mummy4"), MUMMY_STEP_TTL)
		]),

		new Animation([
			new Frame(getElement("mummy5"), MUMMY_STEP_TTL)
		])
	]);

	this.canFire = false;
	this.xSpeed = -1;
	this.yAcceleration = 0;
	this.ySpeed = 0;
	this.state = StateEnum.ENTERING;
	this.footBox = new Rect(new Point(), new Size(this.sprite.rect.getWidth(), 1));
	this.handBox = new Rect(new Point(), new Size(1, this.sprite.rect.getHeight() / 2));
	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setTop(1);

	while (this.sprite.rect.point.y < game.getHeight() && !game.tileSpriteCollection.getCollision(this.sprite.rect)) {
		this.sprite.rect.point.y += TILE_SIZE;
	}
}

MummyEnemy.prototype.aim = function() {
	if (random(50) == 0) {
		this.state = StateEnum.WALKING;
		this.sprite.setAnimationIndex(this.sprite.index - 1);

		if (random(2) == 0) {
			this.canFire = true;
			this.owner.fire();
			this.canFire = false;
		}
	}
};

MummyEnemy.prototype.correctHeight = function() {
	var collision;

	do {
		--this.sprite.rect.point.y;
		--this.footBox.point.y;
		collision = game.tileSpriteCollection.getCollision(this.footBox);
	} while (collision && !collision.isHollow);

	++this.sprite.rect.point.y;
	++this.footBox.point.y;
};

MummyEnemy.prototype.enter = function() {
	if (game.xSpeed > this.xSpeed && random(3) == 0 && game.tileSpriteCollection.getCollision(new Rect(new Point(0, 0), new Size(1, game.getHeight())))) {
		this.sprite.rect.setRight(0);
		this.turn();
	}

	this.correctHeight();
	this.state = StateEnum.WALKING;
};

MummyEnemy.prototype.turn = function() {
	this.xSpeed = -this.xSpeed;

	if (this.xSpeed < 0) {
		this.sprite.setAnimationIndex(0);
	} else {
		this.sprite.setAnimationIndex(2);
	}

	this.state = StateEnum.WALKING;
};

MummyEnemy.prototype.update = function() {
	this.sprite.rect.point.y += this.ySpeed;
	this.footBox.setLeft(this.sprite.rect.getLeft());
	this.footBox.setBottom(this.sprite.rect.getBottom() - 1);
	var collision = game.tileSpriteCollection.getCollision(this.footBox);

	if (!collision || collision.isHollow) {
		if (++this.ySpeed > MUMMY_MAX_VERTICAL_SPEED) {
			this.ySpeed = MUMMY_MAX_VERTICAL_SPEED;
		}
	} else if (this.ySpeed > 0) {
		this.correctHeight();
		this.ySpeed = 0;
	}

	if (this.xSpeed < 0) {
		this.handBox.setLeft(this.sprite.rect.getLeft());
	} else {
		this.handBox.setLeft(this.sprite.rect.getRight());
	}

	this.handBox.setTop(this.sprite.rect.getTop());
	collision = game.tileSpriteCollection.getCollision(this.handBox);

	if (collision && !collision.isHollow) {
		this.state = StateEnum.TURNING;
	}

	this[StateToMethodNameMap[this.state]]();
};

MummyEnemy.prototype.walk = function() {
	if (this.ySpeed > 0) {
		return;
	}

	if (random(90) == 0) {
		this.state = StateEnum.AIMING;
		this.sprite.setAnimationIndex(this.sprite.index + 1);
	} else if (random(100) == 0) {
		this.state = StateEnum.TURNING;
	}

	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.update();
};

function PlaneEnemy() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("plane0"))]),
		new Animation([new Frame(getElement("plane1"))]),
		new Animation([new Frame(getElement("plane2"))])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setTop(random(game.getHeight()));
	this.canFire = true;
	this.yAcceleration = 0;
	this.ySpeed = 0;
}

PlaneEnemy.prototype.update = function() {
	if (this.yAcceleration == 0 && this.sprite.rect.getLeft() < game.getWidth() / 2) {
		if (this.sprite.rect.getCenterY() < game.getHeight() / 2) {
			this.sprite.setAnimationIndex(1);
			this.yAcceleration = PLANE_VERTICAL_ACCELERATION;
		} else {
			this.sprite.setAnimationIndex(2);
			this.yAcceleration = -PLANE_VERTICAL_ACCELERATION;
		}
	}

	this.sprite.rect.point.x += PLANE_HORIZONTAL_SPEED;

	if (Math.abs(this.ySpeed) < PLANE_MAX_VERTICAL_SPEED) {
		this.ySpeed += this.yAcceleration;
	}

	this.sprite.rect.point.y += Math.floor(this.ySpeed);
};

function RocketEnemy() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("rocket0"))]),
		new Animation([new Frame(getElement("rocket1"))])
	]);

	this.sprite.rect.setLeft(random(game.getWidth()));
	this.sprite.rect.setTop(game.getHeight());
	this.layerEnum = LayerEnum.BEHIND;
	this.yAcceleration = -2;
	this.ySpeed = 0;
	sound.play("rocketSound");
}

RocketEnemy.prototype.update = function() {
	if (this.yAcceleration < 0 && this.sprite.rect.getBottom() < - (game.getHeight() / 2)) {
		this.yAcceleration = - this.yAcceleration;
		this.ySpeed = - this.ySpeed;
		this.sprite.setAnimationIndex(1);
		this.sprite.rect.setCenterX(game.human.getTarget().x);
	}

	if (Math.abs(this.ySpeed) < 8) {
		this.ySpeed += this.yAcceleration;
	}

	this.sprite.rect.point.y += Math.floor(this.ySpeed);

	if (this.sprite.rect.getTop() > game.getWidth()) {
		return true;
	}
};

function SkullEnemy(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("skull0"), 6),
			new Frame(getElement("skull1"), 6)
		]),

		new Animation([
			new Frame(Core2D.image("skull0", true), 6),
			new Frame(Core2D.image("skull1", true), 6)
		]),
	]);

	this.xSpeed = -2;
	this.yAcceleration = 0;
	this.ySpeed = 0;
	this.state = StateEnum.ENTERING;
	this.footBox = new Rect(new Point(), new Size(this.sprite.rect.getWidth(), 1));
	this.handBox = new Rect(new Point(), new Size(1, this.sprite.rect.getHeight() / 2));
	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setBottom(game.getHeight());
	this.canFire = true;

	if (game.xSpeed > this.xSpeed && random(3) == 0 && game.tileSpriteCollection.getCollision(new Rect(new Point(0, 0), new Size(1, game.getHeight())))) {
		this.sprite.rect.setRight(0);
		this.turn();
	}

	while (this.sprite.rect.point.y > 0 && game.tileSpriteCollection.getCollision(this.sprite.rect)) {
		this.sprite.rect.point.y -= TILE_SIZE;
	}

	this.sprite.rect.point.y += TILE_SIZE;
	++this.sprite.rect.point.y;
}

SkullEnemy.prototype.correctHeight = function() {
	var collision;

	do {
		--this.sprite.rect.point.y;
		--this.footBox.point.y;
		collision = game.tileSpriteCollection.getCollision(this.footBox);
	} while (collision && !collision.isHollow);

	++this.sprite.rect.point.y;
	++this.footBox.point.y;
};

SkullEnemy.prototype.enter = function() {
	this.correctHeight();
	this.state = StateEnum.WALKING;
};

SkullEnemy.prototype.turn = function() {
	this.xSpeed = -this.xSpeed;

	if (this.xSpeed < 0) {
		this.sprite.setAnimationIndex(0);
	} else {
		this.sprite.setAnimationIndex(1);
	}

	this.state = StateEnum.WALKING;
};

SkullEnemy.prototype.update = function() {
	this.sprite.rect.point.y += this.ySpeed;
	this.footBox.setLeft(this.sprite.rect.getLeft());
	this.footBox.setBottom(this.sprite.rect.getBottom() - 1);
	var collision = game.tileSpriteCollection.getCollision(this.footBox);

	if (!collision || collision.isHollow) {
		if (++this.ySpeed > MUMMY_MAX_VERTICAL_SPEED) {
			this.ySpeed = MUMMY_MAX_VERTICAL_SPEED;
		}
	} else if (this.ySpeed > 0) {
		this.correctHeight();
		this.ySpeed = 0;
	}

	if (this.xSpeed < 0) {
		this.handBox.setLeft(this.sprite.rect.getLeft());
	} else {
		this.handBox.setLeft(this.sprite.rect.getRight());
	}

	this.handBox.setTop(this.sprite.rect.getTop());
	collision = game.tileSpriteCollection.getCollision(this.handBox);

	if (collision && !collision.isHollow) {
		this.state = StateEnum.TURNING;
	}

	this[StateToMethodNameMap[this.state]]();
};

SkullEnemy.prototype.walk = function() {
	if (this.ySpeed > 0) {
		return;
	}

	if (random(100) == 0) {
		this.state = StateEnum.TURNING;
	}

	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.update();
};

function SnakeEnemy(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("snake0"), MUMMY_STEP_TTL),
			new Frame(getElement("snake1"), MUMMY_STEP_TTL)
		]),

		new Animation([
			new Frame(getElement("snake2"), MUMMY_STEP_TTL),
			new Frame(getElement("snake3"), MUMMY_STEP_TTL)
		]),
	]);

	this.xSpeed = -2;
	this.yAcceleration = 0;
	this.ySpeed = 0;
	this.state = StateEnum.ENTERING;
	this.footBox = new Rect(new Point(), new Size(this.sprite.rect.getWidth(), 1));
	this.handBox = new Rect(new Point(), new Size(1, this.sprite.rect.getHeight() / 2));
	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setBottom(game.getHeight());
	this.canFire = true;

	if (game.xSpeed > this.xSpeed && random(3) == 0 && game.tileSpriteCollection.getCollision(new Rect(new Point(0, 0), new Size(1, game.getHeight())))) {
		this.sprite.rect.setRight(0);
		this.turn();
	}

	while (this.sprite.rect.point.y > 0 && game.tileSpriteCollection.getCollision(this.sprite.rect)) {
		this.sprite.rect.point.y -= TILE_SIZE;
	}

	this.sprite.rect.point.y += TILE_SIZE;
	++this.sprite.rect.point.y;
}

SnakeEnemy.prototype.correctHeight = function() {
	var collision;

	do {
		--this.sprite.rect.point.y;
		--this.footBox.point.y;
		collision = game.tileSpriteCollection.getCollision(this.footBox);
	} while (collision && !collision.isHollow);

	++this.sprite.rect.point.y;
	++this.footBox.point.y;
};

SnakeEnemy.prototype.enter = function() {
	this.correctHeight();
	this.state = StateEnum.WALKING;
};

SnakeEnemy.prototype.turn = function() {
	this.xSpeed = -this.xSpeed;

	if (this.xSpeed < 0) {
		this.sprite.setAnimationIndex(0);
	} else {
		this.sprite.setAnimationIndex(1);
	}

	this.state = StateEnum.WALKING;
};

SnakeEnemy.prototype.update = function() {
	this.sprite.rect.point.y += this.ySpeed;
	this.footBox.setLeft(this.sprite.rect.getLeft());
	this.footBox.setBottom(this.sprite.rect.getBottom() - 1);
	var collision = game.tileSpriteCollection.getCollision(this.footBox);

	if (!collision || collision.isHollow) {
		if (++this.ySpeed > MUMMY_MAX_VERTICAL_SPEED) {
			this.ySpeed = MUMMY_MAX_VERTICAL_SPEED;
		}
	} else if (this.ySpeed > 0) {
		this.correctHeight();
		this.ySpeed = 0;
	}

	if (this.xSpeed < 0) {
		this.handBox.setLeft(this.sprite.rect.getLeft());
	} else {
		this.handBox.setLeft(this.sprite.rect.getRight());
	}

	this.handBox.setTop(this.sprite.rect.getTop());
	collision = game.tileSpriteCollection.getCollision(this.handBox);

	if (collision && !collision.isHollow) {
		this.state = StateEnum.TURNING;
	}

	this[StateToMethodNameMap[this.state]]();
};

SnakeEnemy.prototype.walk = function() {
	if (this.ySpeed > 0) {
		return;
	}

	if (random(100) == 0) {
		this.state = StateEnum.TURNING;
	}

	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.update();
};

function EnemyShot() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("enemyShot0"), PLAYER_FRAME_TTL),
			new Frame(getElement("enemyShot1"), PLAYER_FRAME_TTL)
		])
	]);

	this.layerEnum = LayerEnum.PROJECTILES;
	this.isDying = false;
	this.hasTarget = false;
	this.xSpeed = 0;
	this.ySpeed = 0;
	game.enemyShotSpriteCollection.push(this);
}

EnemyShot.prototype.die = function() {
	this.isDying = true;
};

EnemyShot.prototype.update = function() {
	if (this.isDying) {
		return true;
	}

	if (!this.hasTarget) {
		this.hasTarget = true;
		var target = game.human.getTarget();
		var squareDistance = Math.abs(this.sprite.rect.getLeft() - target.x) + Math.abs(this.sprite.rect.getTop() - target.y);
		this.xSpeed = Math.round((target.x - this.sprite.rect.getLeft()) / squareDistance * ENEMY_SHOT_SPEED);
		this.ySpeed = Math.round((target.y - this.sprite.rect.getTop()) / squareDistance * ENEMY_SHOT_SPEED);
	}

	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.rect.point.y += this.ySpeed;

	if (this.sprite.rect.getRight() < 0 || this.sprite.rect.getLeft() > game.getWidth() || this.sprite.rect.getBottom() < 0 || this.sprite.rect.getTop() > game.getHeight()) {
		this.die();
	}

	var collision = game.tileSpriteCollection.getCollision(this.sprite.rect);

	if (collision && !collision.isHollow) {
		this.die();
	}

	this.sprite.update();
	game.renderer.push(LayerEnum.PROJECTILES, this.sprite);
};

EnemyShot.prototype.wound = function() {
	this.die();
};

// Bosses
function Boss(bossEnum) {
	this.delegate = new BossToClassMap[bossEnum](this);
	this.explosion = null;
	this.isDying = false;
	this.state = StateEnum.ENTERING;
	this.lastState = null;
	this.tick = 0;
}

Boss.prototype.die = function() {
	this.isDying = true;
	this.explosion = new Explosion(ExplosionEnum.HUGE, false);
	this.explosion.delegate.sprite.rect.setCenter(this.delegate.sprite.rect.getCenter());

	for (let i in this.delegate.hitBoxes) {
		var hitBox = this.delegate.hitBoxes[i];
		hitBox.die();
	}
};

Boss.prototype.update = function() {
	if (this.isDying) {
		if (this.explosion.update()) {
			return true;
		}

		return;
	}

	if (this.state != this.lastState) {
		this.lastState = this.state;
		this.tick = 0;
	}

	this.delegate[StateToMethodNameMap[this.state]]();

	if (this.delegate.update()) {
		this.die();
		return;
	}

	game.renderer.push(this.delegate.layerEnum, this.delegate);
	++this.tick;
};

Boss.prototype.wound = function() {
	if (--this.delegate.hitPoints < 1) {
		this.die();
	}
};

function ShipBoss(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("ship"))])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setTop(random(game.getHeight()) -190);
	this.layerEnum = LayerEnum.ENEMIES;
	this.yAcceleration = 0.05;
	this.ySpeed = 0;
	this.hitPoints = 50;

	this.hitBoxes = [
		new HitBox(this, new Point(2, 107), new Size(18, 40), true),
		new HitBox(this, new Point(20, 83), new Size(31, 26), false),
		new HitBox(this, new Point(140, 18), new Size(93, 49), false),
		new HitBox(this, new Point(102, 67), new Size(100, 42), false),
		new HitBox(this, new Point(38, 109), new Size(137, 81), false),
		new HitBox(this, new Point(224, 132), new Size(40, 21), false),
		new HitBox(this, new Point(175, 153), new Size(89, 37), false),
		new HitBox(this, new Point(73, 190), new Size(146, 52), false)
	];
}

ShipBoss.prototype.enter = function() {
	this.sprite.rect.point.x -= 2;

	if (this.sprite.rect.getRight() < game.getWidth()) {
		this.sprite.rect.setLeft(Math.floor(this.sprite.rect.getLeft()));
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

ShipBoss.prototype.fire = function() {
	var bossShot = new BossShot(BossShotEnum.BALL);
	bossShot.delegate.sprite.setCenter(this.hitBoxes[0].rect.getCenter());
	this.owner.state = StateEnum.THINKING;
};

ShipBoss.prototype.goDown = function() {
	++this.sprite.rect.point.y;

	if (this.owner.tick == 60) {
		this.owner.state = StateEnum.FIRING;
	}
};

ShipBoss.prototype.goUp = function() {
	--this.sprite.rect.point.y;

	if (this.owner.tick == 55) {
		this.owner.state = StateEnum.FIRING;
	}
};

ShipBoss.prototype.render = function() {
	this.sprite.render(context);
};

ShipBoss.prototype.think = function() {
	var target = game.human.getTarget();

	if (target.y < this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_UP;
	} else if (target.y > this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

ShipBoss.prototype.update = function() {
	if (Math.abs(this.ySpeed) > 1) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.ySpeed += this.yAcceleration;
	this.sprite.rect.point.y += this.ySpeed;
};

ShipBoss.prototype.wound = function() {
	this.owner.wound();
	return true;
};

function SkullBoss(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("skull"))])
	]);

	this.sprite.rect.setCenterX(game.getWidth() / 2);
	this.sprite.rect.setBottom(0);
	this.layerEnum = LayerEnum.ENEMIES;
	this.yAcceleration = 0.05;
	this.xSpeed = 0;
	this.xTargetSpeed = 0;
	this.yTargetSpeed = 1;
	this.ySpeed = 0;
	this.hitPoints = 100;

	this.hitBoxes = [
		new HitBox(this, new Point(11, 45), new Size(28, 28), true),
		new HitBox(this, new Point(36, 5), new Size(58, 14), false),
		new HitBox(this, new Point(11, 19), new Size(105, 26), false),
		new HitBox(this, new Point(39, 45), new Size(81, 28), false),
		new HitBox(this, new Point(11, 73), new Size(85, 17), false),
		new HitBox(this, new Point(15, 90), new Size(42, 37), false)
	];

	sound.play("skullSound");
}

SkullBoss.prototype.enter = function() {
	if (this.sprite.rect.getTop() > 0) {
		this.xTargetSpeed = 2;
		this.yTargetSpeed = 0;
		this.owner.state = StateEnum.GOING_RIGHT;
	}
};

SkullBoss.prototype.fire = function() {
	var bossShot = new BossShot(BossShotEnum.ARROW);
	bossShot.delegate.sprite.setRight(this.hitBoxes[0].rect.getLeft());
	bossShot.delegate.sprite.setCenterY(this.hitBoxes[0].rect.getCenterY());
	this.owner.state = StateEnum.WAITING;
};

SkullBoss.prototype.goDown = function() {
	this.sprite.rect.point.y += 2;

	if (this.owner.tick == 60) {
		this.owner.state = StateEnum.FIRING;
	}
};

SkullBoss.prototype.goLeft = function() {
	if (this.sprite.rect.getLeft() < 0 || this.sprite.rect.getCenterY() < 0 || this.sprite.rect.getCenterY() > game.getHeight()) {
		this.xTargetSpeed = 3;
		this.yTargetSpeed = 0;
		this.owner.state = StateEnum.GOING_RIGHT;
	}
};

SkullBoss.prototype.goRight = function() {
	if (this.sprite.rect.getRight() > game.getWidth()) {
		this.xTargetSpeed = 0;
		this.yTargetSpeed = 0;
		this.owner.state = StateEnum.THINKING;
	}
};

SkullBoss.prototype.goUp = function() {
	this.sprite.rect.point.y -= 2;

	if (this.owner.tick == 55) {
		this.owner.state = StateEnum.FIRING;
	}
};

SkullBoss.prototype.render = function() {
	this.sprite.render(context);
};

SkullBoss.prototype.think = function() {
	var target = game.human.getTarget();

	if (random(5) == 0) {
		var squareDistance = Math.abs(this.sprite.rect.getLeft() - target.x) + Math.abs(this.sprite.rect.getTop() - target.y);
		this.xTargetSpeed = Math.round((target.x - this.sprite.rect.getCenterX()) / squareDistance * ENEMY_SHOT_SPEED);
		this.yTargetSpeed = Math.round((target.y - this.sprite.rect.getCenterY()) / squareDistance * ENEMY_SHOT_SPEED);
		this.owner.state = StateEnum.GOING_LEFT;
		sound.play("skullSound");
	} else if (target.y < this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_UP;
	} else if (target.y > this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

SkullBoss.prototype.update = function() {
	if (Math.abs(this.ySpeed) > 1) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.ySpeed += this.yAcceleration;
	this.sprite.rect.point.y += this.ySpeed;
	this.sprite.rect.point.x += this.xTargetSpeed;
	this.sprite.rect.point.y += this.yTargetSpeed;
};

SkullBoss.prototype.wait = function() {
	if (this.owner.tick > 20) {
		this.owner.state = StateEnum.THINKING;
	}
};

SkullBoss.prototype.wound = function() {
	this.owner.wound();
	return true;
};

function ZeppelinBoss(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("zeppelin"))])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setTop(-190);
	this.layerEnum = LayerEnum.ENEMIES;
	this.yAcceleration = 0.05;
	this.ySpeed = 0;
	this.hitPoints = 100;

	this.hitBoxes = [
		new HitBox(this, new Point(8, 103), new Size(18, 32), true),
		new HitBox(this, new Point(15, 67), new Size(21, 36), false),
		new HitBox(this, new Point(15, 135), new Size(21, 36), false),
		new HitBox(this, new Point(36, 42), new Size(278, 152), false),
		new HitBox(this, new Point(60, 18), new Size(163, 24), false),
		new HitBox(this, new Point(70, 194), new Size(163, 25), false),
		new HitBox(this, new Point(97, 219), new Size(111, 49), false),
		new HitBox(this, new Point(131, 1), new Size(9, 17), false),
		new HitBox(this, new Point(280, 8), new Size(30, 34), false),
		new HitBox(this, new Point(314, 153), new Size(31, 22), false)
	];

	sound.play("zeppelinSound");
}

ZeppelinBoss.prototype.enter = function() {
	this.sprite.rect.point.x -= 1;

	if (this.sprite.rect.getRight() < game.getWidth()) {
		this.sprite.rect.setLeft(Math.floor(this.sprite.rect.getLeft()));
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

ZeppelinBoss.prototype.fire = function() {
	var bossShot = new BossShot(BossShotEnum.SIGHT);
	bossShot.delegate.sprite.setCenter(this.hitBoxes[0].rect.getCenter());
	this.owner.state = StateEnum.THINKING;
};

ZeppelinBoss.prototype.goDown = function() {
	++this.sprite.rect.point.y;

	if (this.owner.tick == 60) {
		this.owner.state = StateEnum.FIRING;
	}
};

ZeppelinBoss.prototype.goUp = function() {
	--this.sprite.rect.point.y;

	if (this.owner.tick == 55) {
		this.owner.state = StateEnum.FIRING;
	}
};

ZeppelinBoss.prototype.render = function() {
	this.sprite.render(context);
};

ZeppelinBoss.prototype.think = function() {
	var target = game.human.getTarget();

	if (target.y < this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_UP;
	} else if (target.y > this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

ZeppelinBoss.prototype.update = function() {
	if (Math.abs(this.ySpeed) > 1) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.ySpeed += this.yAcceleration;
	this.sprite.rect.point.y += this.ySpeed;
};

ZeppelinBoss.prototype.wound = function() {
	this.owner.wound();
	return true;
};

function BossShot(bossShotEnum) {
	this.delegate = new BossShotToClassMap[bossShotEnum]();
	this.isDying = false;
	game.bossShotSpriteCollection.push(this);
}

BossShot.prototype.die = function() {
	this.isDying = true;
};

BossShot.prototype.update = function() {
	if (this.isDying || this.delegate.update() || this.delegate.sprite.getRight() < 0) {
		return true;
	}

	game.renderer.push(LayerEnum.PROJECTILES, this.delegate);
};

BossShot.prototype.wound = function() {
	this.die();
};

function ArrowBossShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("arrow"))])
	]);

	this.xSpeed = -16;
	sound.play("arrowSound");
}

ArrowBossShot.prototype.render = function() {
	this.sprite.render(context);
};

ArrowBossShot.prototype.update = function() {
	this.sprite.rect.point.x += this.xSpeed;
};

function BallBossShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("ball"))])
	]);

	this.xSpeed = -16;
	sound.play("ballSound");
}

BallBossShot.prototype.render = function() {
	this.sprite.render(context);
};

BallBossShot.prototype.update = function() {
	this.sprite.rect.point.x += this.xSpeed;
};

function RayBossShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("ray"))])
	]);

	this.baseSprite = new Sprite([
		new Animation([new Frame(getElement("rayBase"))])
	]);

	this.lengthIncrement = 24;
	this.needsAdjustment = true;
	this.xSpeed = this.lengthIncrement * -1;
	sound.play("raySound");
}

RayBossShot.prototype.render = function() {
	drawImage(this.sprite.rect.point, this.sprite.animation.frame.image, this.sprite.rect.size);
	this.baseSprite.render(context);
};

RayBossShot.prototype.update = function() {
	if (this.needsAdjustment) {
		this.needsAdjustment = false;
		this.sprite.rect.point.x -= this.baseSprite.rect.size.width;
	}

	this.sprite.rect.point.x += this.xSpeed;

	if (this.sprite.rect.point.x > 0) {
		this.sprite.rect.size.width += this.lengthIncrement;
	}

	this.baseSprite.rect.setLeft(this.sprite.rect.getRight());
	this.baseSprite.rect.setTop(this.sprite.rect.getTop());
};

function SightBossShot() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("sight"))])
	]);

	this.bottomSprite = new Sprite([
		new Animation([new Frame(getElement("sightBottom"))])
	]);

	this.topSprite = new Sprite([
		new Animation([new Frame(getElement("sightTop"))])
	]);

	this.sprite.rect.setHeight(10);
	this.xSpeed = -6;
	this.breadthIncrement = 2;
	this.ySpeed = this.breadthIncrement / -2;
	sound.play("sightSound");
}

SightBossShot.prototype.render = function() {
	drawImage(this.sprite.rect.point, this.sprite.animation.frame.image, this.sprite.rect.size);
	this.bottomSprite.render(context);
	this.topSprite.render(context);
};

SightBossShot.prototype.update = function() {
	this.sprite.rect.point.x += this.xSpeed;
	this.sprite.rect.point.y += this.ySpeed;
	this.sprite.rect.size.height += this.breadthIncrement;
	this.bottomSprite.rect.setLeft(this.sprite.rect.getLeft());
	this.bottomSprite.rect.setTop(this.sprite.rect.getBottom());
	this.topSprite.rect.setLeft(this.sprite.rect.getLeft());
	this.topSprite.rect.setBottom(this.sprite.rect.getTop());
};

function SphinxBoss(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("sphinx"))])
	]);

	this.eyeSprite = new Sprite([
		new Animation([new Frame(getElement("sphinxEye"))])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setBottom(game.getHeight());
	this.layerEnum = LayerEnum.BEHIND;
	this.hitPoints = 100;

	this.hitBoxes = [
		new HitBox(this, new Point(42, 77), new Size(30, 18), true),
		new HitBox(this, new Point(9, 124), new Size(31, 65), false),
		new HitBox(this, new Point(40, 32), new Size(169, 45), false),
		new HitBox(this, new Point(40, 95), new Size(212, 86), false),
		new HitBox(this, new Point(40, 181), new Size(44, 15), false),
		new HitBox(this, new Point(61, 6), new Size(92, 26), false),
		new HitBox(this, new Point(72, 77), new Size(171, 18), false)
	];

	var tilemap = [
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0"],
		["S0", "P0"],
		["S0", "P1", "P0"],
		["S0", "P3", "P2", "P0"],
		["S0", "P4", "P4", "P3", "P8"]
	];

	this.builder = new Builder(tilemap);
	sound.play("sphinxSound");
}

SphinxBoss.prototype.enter = function() {
	this.sprite.rect.point.x += game.xSpeed;

	if (this.builder.update()) {
		this.owner.state = StateEnum.WAITING;
		game.xSpeed = 0;
	}
};

SphinxBoss.prototype.fire = function() {
	var bossShot = new BossShot(BossShotEnum.RAY);
	bossShot.delegate.sprite.setRight(this.sprite.rect.point.x + 59);
	bossShot.delegate.sprite.setCenterY(this.sprite.rect.point.y + 86);
	this.owner.state = StateEnum.RELOADING;
};

SphinxBoss.prototype.reload = function() {
	if (this.owner.tick == 40) {
		this.owner.state = StateEnum.WAITING;
	}
};

SphinxBoss.prototype.render = function() {
	this.sprite.render(context);

	if (this.owner.state == StateEnum.THINKING) {
		this.eyeSprite.rect.setLeft(this.sprite.rect.getLeft() + 40);
		this.eyeSprite.rect.setTop(this.sprite.rect.getTop() + 79);
		this.eyeSprite.render(context);
	}
};

SphinxBoss.prototype.think = function() {
	if (this.owner.tick == 40) {
		this.owner.state = StateEnum.FIRING;
	}
};

SphinxBoss.prototype.update = function() {
};

SphinxBoss.prototype.wait = function() {
};

SphinxBoss.prototype.wound = function() {
	if (this.owner.state == StateEnum.ENTERING) {
		return false;
	}

	if (this.owner.state != StateEnum.FIRING) {
		this.owner.state = StateEnum.THINKING;
	}

	this.owner.wound();
	return true;
};

function SubmarineBoss(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("submarine"))])
	]);

	this.periscope = new Sprite([
		new Animation([new Frame(getElement("periscope0"))]),
		new Animation([new Frame(getElement("periscope1"))])
	]);

	this.sprite.rect.setRight(game.getWidth());
	this.sprite.rect.setTop(game.getHeight());
	this.layerEnum = LayerEnum.BEHIND;
	this.yAcceleration = -0.05;
	this.ySpeed = 0;
	this.hitPoints = 25;

	this.hitBoxes = [
		new HitBox(this, new Point(72, -32), new Size(32, 32), true),
		new HitBox(this, new Point(3, 45), new Size(16, 32), false),
		new HitBox(this, new Point(19, 35), new Size(154, 72), false),
		new HitBox(this, new Point(39, 107), new Size(87, 18), false),
		new HitBox(this, new Point(58, 2), new Size(60, 33), false),
		new HitBox(this, new Point(173, 47), new Size(82, 52), false)
	];

	sound.play("submarineSound");
}

SubmarineBoss.prototype.enter = function() {
	this.owner.state = StateEnum.GOING_UP;
};

SubmarineBoss.prototype.fire = function() {
	if (this.owner.tick == 0) {
		this.turn();
		createEnemyShot(this.periscope.getCenter());
	}

	if (this.owner.tick == 20) {
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

SubmarineBoss.prototype.goUp = function() {
	this.sprite.rect.point.y -= 1;

	if (this.sprite.rect.getTop() < game.getHeight() - 32) {
		this.owner.state = StateEnum.WAITING;
	}
};

SubmarineBoss.prototype.goDown = function() {
	this.sprite.rect.point.y += 1;

	if (this.sprite.rect.getTop() - 24 > game.getHeight()) {
		this.owner.state = StateEnum.THINKING;
	}
};

SubmarineBoss.prototype.goLeft = function() {
	this.sprite.rect.point.x -= 2;

	if (this.sprite.rect.getCenterX() < this.xTarget) {
		this.turn();
		this.owner.state = StateEnum.GOING_UP;
	}
};

SubmarineBoss.prototype.goRight = function() {
	this.sprite.rect.point.x += 2;

	if (this.sprite.rect.getCenterX() > this.xTarget) {
		this.turn();
		this.owner.state = StateEnum.GOING_UP;
	}
};

SubmarineBoss.prototype.launch = function() {
	var enemy = new Enemy(EnemyEnum.ROCKET);
	var x = random(game.getWidth() - enemy.delegate.sprite.getWidth());
	enemy.delegate.sprite.setCenterX(x);
	var explosion = new Explosion(ExplosionEnum.SPLASH, false);
	explosion.delegate.sprite.rect.setCenterX(enemy.delegate.sprite.rect.getCenterX());
	explosion.delegate.sprite.rect.setBottom(game.getHeight() - 16);
};

SubmarineBoss.prototype.render = function() {
	this.sprite.render(context);
	this.periscope.render(context);
};

SubmarineBoss.prototype.swing = function() {
	if (Math.abs(this.ySpeed) > 1) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.ySpeed += this.yAcceleration;
	this.sprite.rect.point.y += this.ySpeed;
};

SubmarineBoss.prototype.think = function() {
	this.launch();
	var x = this.periscope.rect.getCenterX();

	if (x < game.getWidth() / 2) {
		this.owner.state = StateEnum.GOING_RIGHT;
		this.xTarget = x + random(game.getWidth() - x - 16);
	} else {
		this.owner.state = StateEnum.GOING_LEFT;
		this.xTarget = 16 + random(x - 16);
	}
};

SubmarineBoss.prototype.turn = function() {
	var target = game.human.getTarget();

	if (this.periscope.rect.getCenterX() < target.x) {
		this.periscope.setAnimationIndex(1);
	} else {
		this.periscope.setAnimationIndex(0);
	}
};

SubmarineBoss.prototype.update = function() {
	if (this.owner.state != StateEnum.ENTERING) {
		this.swing();
	}

	this.periscope.rect.setLeft(this.sprite.rect.getLeft() + 72);
	this.periscope.rect.setBottom(this.sprite.rect.getTop());
};

SubmarineBoss.prototype.wait = function() {
	if (this.owner.tick > 20) {
		this.owner.state = StateEnum.FIRING;
	}
};

SubmarineBoss.prototype.wound = function() {
	this.owner.wound();
	return true;
};

function UnderwaterBoss(owner) {
	this.owner = owner;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("submarine"))])
	]);

	this.propeller = new Sprite([
		new Animation([
			new Frame(getElement("propeller0"), PLAYER_FRAME_TTL),
			new Frame(getElement("propeller1"), PLAYER_FRAME_TTL),
			new Frame(getElement("propeller2"), PLAYER_FRAME_TTL)
		])
	]);

	this.sprite.rect.setLeft(game.getWidth());
	this.sprite.rect.setCenterY(game.getHeight() / 2);
	this.layerEnum = LayerEnum.ENEMIES;
	this.yAcceleration = 0.05;
	this.ySpeed = 0;
	this.hitPoints = 50;

	this.hitBoxes = [
		new HitBox(this, new Point(57, 15), new Size(31, 7), true),
		new HitBox(this, new Point(3, 45), new Size(16, 32), false),
		new HitBox(this, new Point(19, 35), new Size(154, 72), false),
		new HitBox(this, new Point(39, 107), new Size(87, 18), false),
		new HitBox(this, new Point(58, 2), new Size(60, 33), false),
		new HitBox(this, new Point(173, 47), new Size(82, 52), false)
	];

	sound.play("submarineSound");
}

UnderwaterBoss.prototype.enter = function() {
	this.sprite.rect.point.x -= 1;

	if (this.sprite.rect.getRight() < game.getWidth()) {
		this.sprite.rect.setLeft(Math.floor(this.sprite.rect.getLeft()));
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

UnderwaterBoss.prototype.fire = function() {
	createEnemyShot(this.sprite.getCenter()).layer = LayerEnum.BEHIND;
	this.owner.state = StateEnum.THINKING;
};

UnderwaterBoss.prototype.goDown = function() {
	++this.sprite.rect.point.y;

	if (this.owner.tick == 60) {
		this.owner.state = StateEnum.FIRING;
	}
};

UnderwaterBoss.prototype.goUp = function() {
	--this.sprite.rect.point.y;

	if (this.owner.tick == 55) {
		this.owner.state = StateEnum.FIRING;
	}
};

UnderwaterBoss.prototype.launch = function() {
	var enemy = new Enemy(EnemyEnum.ROCKET);
	enemy.layer = LayerEnum.BEHIND;
	enemy.delegate.sprite.setCenterX(this.sprite.getCenterX());
	enemy.delegate.sprite.setTop(this.sprite.getTop());
};

UnderwaterBoss.prototype.render = function() {
	this.sprite.render(context);
	this.propeller.render(context);
};

UnderwaterBoss.prototype.think = function() {
	this.launch();
	var target = game.human.getTarget();

	if (target.y < this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_UP;
	} else if (target.y > this.sprite.rect.getCenterY()) {
		this.owner.state = StateEnum.GOING_DOWN;
	}
};

UnderwaterBoss.prototype.update = function() {
	if (Math.abs(this.ySpeed) > 1) {
		this.yAcceleration = -this.yAcceleration;
	}

	this.ySpeed += this.yAcceleration;
	this.sprite.rect.point.y += this.ySpeed;
	this.propeller.rect.setRight(this.sprite.rect.getRight());
	this.propeller.rect.setTop(this.sprite.rect.getTop() + 47);
	this.propeller.update();
};

UnderwaterBoss.prototype.wound = function() {
	this.owner.wound();
	return true;
};

// Ground
function Builder(data) {
	this.data = data;
	this.index = -1;
	this.point = new Point();
}

Builder.prototype.update = function() {
	this.point.x += game.xSpeed;
	this.point.y += game.ySpeed;
	var dividend;

	if (Math.abs(game.xSpeed) > 0) {
		dividend = this.point.x;
	} else if (Math.abs(game.ySpeed) > 0) {
		dividend = this.point.y;
	}

	var index = Math.floor(Math.abs(dividend / TILE_SIZE));
	var offset = dividend % TILE_SIZE;

	if (index > this.index) {
		this.index = index;
		var column = this.data[this.index];

		if (!column) {
			return true;
		}

		for (let i in column) {
			var code = column[i].trim();

			if (!code || code == "") {
				continue;
			}

			var tile = new Tile(code);

			if (game.xSpeed < 0) {
				tile.sprite.rect.setLeft(game.getWidth() + offset);
				tile.sprite.rect.setBottom(game.getHeight() - (i * TILE_SIZE));
			} else if (game.xSpeed > 0) {
				tile.sprite.rect.setRight(0 + offset);
				tile.sprite.rect.setBottom(game.getHeight() - (i * TILE_SIZE));
			} else if (game.ySpeed < 0) {
				tile.sprite.rect.setTop(game.getHeight() + offset);
				tile.sprite.rect.setLeft(0 + (i * TILE_SIZE));
			} else if (game.ySpeed > 0) {
				tile.sprite.rect.setBottom(0 + offset);
				tile.sprite.rect.setLeft(0 + (i * TILE_SIZE));
			}
		}
	}
};

function Tile(code) {
	var data = TileData[code];
	this.isAnimated = data[0];
	this.isFragile = data[1];
	this.isHollow = data[2];
	this.isInFront = data[3];
	var frames = [];

	if (this.isAnimated) {
		for (let i = 0; i < ANIMATED_TILE_IMAGES; ++i) {
			frames.push(new Frame(getElement("tile" + code + "_" + i), PLAYER_FRAME_TTL));
		}
	} else {
		frames.push(new Frame(getElement("tile" + code), PLAYER_FRAME_TTL));
	}

	this.sprite = new Sprite([new Animation(frames)]);
	game.tileSpriteCollection.push(this);
}

Tile.prototype.die = function() {
	this.isDying = true;
	var explosion = new Explosion(ExplosionEnum.SMALL, false);
	explosion.delegate.sprite.setCenter(this.sprite.getCenter());
};

Tile.prototype.update = function() {
	if (this.isDying) {
		return true;
	}

	this.sprite.rect.point.x += game.xSpeed;
	this.sprite.rect.point.y += game.ySpeed;

	if (this.sprite.rect.getRight() < 0 - TILE_SIZE || this.sprite.rect.getLeft() > game.getWidth() + TILE_SIZE) {
		return true;
	}

	if (this.isAnimated) {
		this.sprite.animation.setFrameIndex(game.tileFrame);
	}

	var layer = LayerEnum.GROUND;

	if (this.isInFront) {
		layer = LayerEnum.FRONT;
	}

	game.renderer.push(layer, this.sprite);
};

Tile.prototype.wound = function() {
	if (this.isFragile) {
		sound.play("chompSound");
		this.die();
		return true;
	}

	return false;
};

// Effects
function Starfield() {
	this.smallStars = [];
	this.bigStars = [];

	for (var i = 0; i < SMALL_STAR_DENSITY; ++i) {
		this.smallStars.push(new Star(new Rect(new Point(random(game.getWidth()), random(game.getHeight())), new Size(SMALL_STAR_SIZE, SMALL_STAR_SIZE))));
	}

	for (let i = 0; i < BIG_STAR_DENSITY; ++i) {
		this.bigStars.push(new Star(new Rect(new Point(random(game.getWidth()), random(game.getHeight())), new Size(BIG_STAR_SIZE, BIG_STAR_SIZE))));
	}
}

Starfield.prototype.update = function() {
	for (let i in this.smallStars) {
		let star = this.smallStars[i];
		star.rect.point.x += game.xSpeed * 0.25;
		star.rect.point.y += game.ySpeed * 0.25;
		check(star);
		star.update();
	}

	for (let i in this.bigStars) {
		let star = this.bigStars[i];
		star.rect.point.x += game.xSpeed * 0.5;
		star.rect.point.y += game.ySpeed * 0.5;
		check(star);
		star.update();
	}

	function check(star) {
		if (star.rect.getLeft() < 1 - star.rect.getWidth()) {
			star.rect.setLeft(game.getWidth());
		} else if (star.rect.getLeft() > game.getWidth()) {
			star.rect.setLeft(1 - star.rect.getWidth());
		}

		if (star.rect.getTop() < 1 - star.rect.getWidth()) {
			star.rect.setTop(game.getHeight());
		} else if (star.rect.getTop() > game.getHeight()) {
			star.rect.setTop(1 - star.rect.getWidth());
		}
	}
};

function Star(rect, fillStyle) {
	this.rect = rect || new Rect();
	this.fillStyle = fillStyle || STAR_COLORS[random(STAR_COLORS.length)];
}

Star.prototype.update = function() {
	if (random(STAR_BLINK_CHANCE) > 0) {
		game.renderer.push(LayerEnum.BACKGROUND, this);
	}
};

Star.prototype.render = function() {
	fillRect(this.rect, this.fillStyle);
};

function Explosion(explosionEnum, hasLoot) {
	this.hasLoot = hasLoot || false;
	this.delegate = new ExplosionToClassMap[explosionEnum]();
	game.explosionSpriteCollection.push(this);
}

Explosion.prototype.update = function() {
	this.delegate.sprite.rect.point.x += game.xSpeed;
	this.delegate.sprite.rect.point.y += game.ySpeed;

	if (this.delegate.sprite.update()) {
		if (this.hasLoot && random(POWER_DROP_CHANCE) == 0) {
			var power = new Power();
			power.delegate.sprite.rect.setCenter(this.delegate.sprite.rect.getCenter());
			game.loot.push(power);
		}

		return true;
	}

	game.renderer.push(LayerEnum.SMOKE, this.delegate.sprite);
};

function SmallExplosion() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("explosion0"), PLAYER_FRAME_TTL),
			new Frame(getElement("explosion1"), PLAYER_FRAME_TTL),
			new Frame(getElement("explosion2"), PLAYER_FRAME_TTL),
			new Frame(getElement("explosion3"), PLAYER_FRAME_TTL)
		])
	]);
}

function BigExplosion() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("bigExplosion0"), BIG_EXPLOSION_FRAME_TTL),
			new Frame(getElement("bigExplosion1"), BIG_EXPLOSION_FRAME_TTL),
			new Frame(getElement("bigExplosion2"), BIG_EXPLOSION_FRAME_TTL)
		])
	]);
}

function HugeExplosion() {
	this.sprite = new Sprite([
		new Animation([
			new Frame(getElement("bigExplosion0"), BIG_EXPLOSION_FRAME_TTL),
			new Frame(getElement("bigExplosion1"), BIG_EXPLOSION_FRAME_TTL),
			new Frame(getElement("bigExplosion2"), BIG_EXPLOSION_FRAME_TTL)
		])
	]);

	this.sprite.rect.setWidth(256);
	this.sprite.rect.setHeight(256);
	sound.play("hugeExplosionSound");
}

function SplashExplosion() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("splash"), SPLASH_EXPLOSION_FRAME_TTL)])
	]);

	sound.play("splashSound");
}

// Screen Subsystem
function Screen() {
	this.transition = null;
	this.view = new BootView();
	this.init();
}

Screen.prototype.init = function() {
	if (!AUTO_SCALE) {
		return;
	}

	var that = this;
	this.resize();
	addEventListener("blur", focus, false);
	addEventListener("click", focus, false);
	addEventListener("focus", focus, false);
	addEventListener("load", focus, false);
	addEventListener("resize", onResize, false);

	function focus() {
		window && window.focus();
	}

	function onResize() {
		that.resize();
	}
};

Screen.prototype.resize = function() {
	canvas.style.width = window.innerWidth + "px";
	canvas.style.height = window.innerHeight + "px";
};

Screen.prototype.setView = function(view) {
	this.view = view;
};

Screen.prototype.update = function() {
	if (this.transition) {
		if (this.transition.render()) {
			this.transition = null;
		}

		return;
	}

	if (this.view.update()) {
		this.setView(new this.view.next());
		this.transition = new Transition();
		input.resetCandidate();
	}
};

function Transition() {
	this.rect = new Rect(new Point(0, 0), new Size(TRANSITION_STEP, canvas.height));
}

Transition.prototype.render = function() {
	if (this.rect.point.x > canvas.width) {
		return true;
	}

	fillRect(this.rect, DEFAULT_FILL_STYLE);
	this.rect.point.x += TRANSITION_STEP;
};

function GameView() {
	this.next = GameOverView;
	game = new Game(this);
	game.init();
}

GameView.prototype.update = function() {
	if (game.update() == true) {
		return true;
	}
};

function Renderer() {
	this.layers = [];

	for (let i = 0; i < Object.keys(LayerEnum).length; ++i) {
		this.layers.push(new Layer());
	}
}

Renderer.prototype.push = function(layerEnum, element) {
	this.layers[layerEnum].push(element);
};

Renderer.prototype.render = function() {
	for (let i in this.layers) {
		var layer = this.layers[i];
		layer.render();
	}
};

function Layer() {
	this.elements = [];
}

Layer.prototype.push = function(element) {
	this.elements.push(element);
};

Layer.prototype.render = function() {
	for (let i in this.elements) {
		var element = this.elements[i];
		element.render(context);
	}

	this.elements = [];
};

function HintView() {
	this.next = TitleView;
	this.background = new Background();
	this.tick = 0;
	this.hearts = new SpriteCollection();

	var colorStops = [
		new ColorStop(0, rgb(0, 0, 0)),
		new ColorStop(1, rgb(0, 0, 128))
	];

	this.background.setFillStyle(new LinearGradient(new Rect(new Point(), new Size(canvas.width, canvas.height)), colorStops));
}

HintView.prototype.update = function() {
	this.background.render();
	this.hearts.update();
	write(new Point(96, 40), "hints");
	write(new Point(96, 72), "up to " + MAX_PLAYERS + " players can join in with gamepads or keyboard");
	write(new Point(96, 88), EXTRA_LIFE_POINTS + " points grant extra life");

	if (!random(3)) {
		this.hearts.push(new Heart());
	}

	if (input.hasCandidate() || ++this.tick > HINT_TTL) {
		return true;
	}
};

function BootView() {
	this.background = new Background();
	this.background.setFillStyle(Color.RoyalBlue);
	this.expiration = 200;
	this.next = TitleView;
	this.tick = 0;
	input.resetCandidate();

	this.logoWhite = new Sprite([
		new Animation([new Frame(getElement("logoWhite"))])
	]);

	this.logoWhite.rect.setCenterX(canvas.width / 2);
	this.logoWhite.rect.setCenterY(canvas.height / 2);

	this.drape = new Rect(
		new Point(this.logoWhite.rect.point.x, this.logoWhite.rect.point.y),
		new Size(this.logoWhite.rect.size.width, this.logoWhite.rect.size.height)
	);

	this.drape.speedY = 0.5;
	this.drape.fillStyle = this.background.fillStyle;
}

BootView.prototype.update = function() {
	if (input.hasCandidate() || ++this.tick > this.expiration) {
		input.resetCandidate();
		return true;
	}

	this.background.render();
	this.logoWhite.render(context);

	if (this.drape.speedY > 0) {
		if (this.drape.point.y < this.logoWhite.rect.point.y + this.logoWhite.rect.size.height) {
			this.drape.point.y += this.drape.speedY;
			fillRect(this.drape, this.drape.fillStyle);
		} else {
			sound.play("maragatoSound");
			this.drape.speedY = 0;
			this.expiration = this.tick + 200;
		}
	}
};

function TitleView() {
	this.next = HintView;
	this.background = new Background();
	this.tick = 0;

	var colorStops = [
		new ColorStop(0, rgb(128, 0, 128)),
		new ColorStop(1, rgb(192, 64, 128))
	];

	this.background.setFillStyle(new LinearGradient(new Rect(new Point(), new Size(canvas.width, canvas.height)), colorStops));
	input.resetCandidate();
	this.state = StateEnum.GOING_UP;

	this.sprite = new Sprite([
		new Animation([new Frame(getElement("logo"))])
	]);

	this.sprite.setCenterX(canvas.width / 2);
	this.sprite.setCenterY(canvas.height / 2);
	this.logoTop = this.sprite.rect.getTop();
	this.sprite.rect.setTop(canvas.height);
	sound.playTheme("titleTheme");
}

TitleView.prototype.checkCandidate = function() {
	if (input.hasCandidate()) {
		input.resetCandidate();
		this.sprite.rect.setLeft(this.logoTop);
		this.sprite.rect.setTop(this.logoTop);
		this.state = StateEnum.WAITING;
	}
};

TitleView.prototype.goLeft = function() {
	this.sprite.rect.point.x -= 2;

	if (this.sprite.rect.point.x == this.logoTop) {
		this.state = StateEnum.WAITING;
		this.tick = 0;
	}

	this.checkCandidate();
};

TitleView.prototype.goUp = function() {
	this.sprite.rect.point.y -= 2;

	if (this.sprite.rect.point.y == this.logoTop) {
		this.state = StateEnum.GOING_LEFT;
	}

	this.checkCandidate();
};

TitleView.prototype.update = function() {
	this.background.render();
	this.sprite.render(context);
	return this[StateToMethodNameMap[this.state]]();
};

TitleView.prototype.wait = function() {
	var leftMargin = this.sprite.rect.getRight() + FONT_SIZE;
	write(new Point(leftMargin, this.logoTop + (8 * FONT_SIZE)), "ms. starship");
	write(new Point(leftMargin, this.logoTop + (10 * FONT_SIZE)), "maragato 2013 - 2021");
	write(new Point(leftMargin, this.logoTop + (12 * FONT_SIZE)), "music by kevin mac leod");

	if (!window.REGISTERED) {
		write(new Point(leftMargin, this.logoTop + (18 * FONT_SIZE)), "shareware version");
	}

	if (Math.floor(this.tick / 16) % 2 == 0) {
		writeCenter(canvas.height - (FONT_SIZE * 2), "press button or push space");
	}

	if (input.hasCandidate()) {
		this.next = GameView;
		sound.fadeOut();
		return true;
	} else if (++this.tick > TITLE_TTL) {
		return true;
	}
};

function Heart() {
	this.sprite = new Sprite([
		new Animation([new Frame(getElement("heart"))])
	]);

	this.sprite.rect.setLeft(random(canvas.width));
	this.sprite.rect.setTop(canvas.height);
	this.xSpeed = random(5) - 2;
	this.ySpeed = random(4);
}

Heart.prototype.update = function() {
	this.sprite.rect.point.x -= this.xSpeed;
	this.sprite.rect.point.y -= this.ySpeed;

	if (this.sprite.rect.getBottom() < 0) {
		this.sprite.rect.setTop(canvas.height);
	}

	this.sprite.render(context);
};

function GameOverView() {
	this.next = BootView;
	this.background = new Background();
	this.tick = 0;

	var colorStops = [
		new ColorStop(0, rgb(64, 0, 0)),
		new ColorStop(1, rgb(128, 64, 64))
	];

	this.background.setFillStyle(new LinearGradient(new Rect(new Point(), new Size(canvas.width, canvas.height)), colorStops));
	input.resetCandidate();
}

GameOverView.prototype.update = function() {
	this.background.render();
	writeCenter(184, "game over");

	if (++this.tick > HINT_TTL || this.tick > (HINT_TTL / 2) && input.hasCandidate()) {
		return true;
	}
};

function BadEndingView() {
	this.next = BootView;
	this.background = new Background();
	this.tick = 0;

	var colorStops = [
		new ColorStop(0, "Black"),
		new ColorStop(1, "MidnightBlue")
	];

	this.background.setFillStyle(new LinearGradient(new Rect(new Point, new Size(canvas.width, canvas.height)), colorStops));
	input.resetCandidate();
	sound.playTheme("6Theme");
}

BadEndingView.prototype.update = function() {
	this.background.render();
	write(new Point(96, 40), "travelling space and time was unfortunatelly");
	write(new Point(96, 72), "not enough to find their missing friend...");
	write(new Point(96, 88), "it seems, the girls will have to keep trying");

	if (++this.tick > HINT_TTL || this.tick > (HINT_TTL / 2) && input.hasCandidate()) {
		return true;
	}
};

function GoodEndingView() {
	this.next = BootView;
	this.background = new Background();
	this.hearts = new SpriteCollection();
	this.tick = 0;

	var colorStops = [
		new ColorStop(0, "MidnightBlue"),
		new ColorStop(1, "Blue")
	];

	this.background.setFillStyle(new LinearGradient(new Rect(new Point, new Size(canvas.width, canvas.height)), colorStops));
	input.resetCandidate();
	sound.playTheme("titleTheme");
}

GoodEndingView.prototype.update = function() {
	this.background.render();
	this.hearts.update();
	write(new Point(96, 40), "after the brave, long and tough journey, the");
	write(new Point(96, 72), "girls finally found their missing friend,");
	write(new Point(96, 88), "so they can reunite on the next adventure");
	write(new Point(96, 120), "congratulations, you are");
	write(new Point(96, 136), "a great star fighter");

	if (!random(3)) {
		this.hearts.push(new Heart());
	}

	if (++this.tick > HINT_TTL || this.tick > (HINT_TTL / 2) && input.hasCandidate()) {
		return true;
	}
};

function SharewareView() {
	this.next = BootView;
	this.background = new Background();
	this.tick = 0;

	var colorStops = [
		new ColorStop(0, "Black"),
		new ColorStop(1, "Yellow")
	];

	this.background.setFillStyle(new LinearGradient(new Rect(new Point, new Size(canvas.width, canvas.height)), colorStops));
	input.resetCandidate();
}

SharewareView.prototype.update = function() {
	this.background.render();
	write(new Point(96, 40), "thanks for playing the shareware version");
	write(new Point(96, 72), "to keep playing this adventure and see");
	write(new Point(96, 88), "how it unfolds, please get the full game");

	if (++this.tick > HINT_TTL || this.tick > (HINT_TTL / 2) && input.hasCandidate()) {
		return true;
	}
};

class Sound {
	constructor() {
		this._isFading = false;
		this._isMute = false;
		this._nextThemeName = null;
		this._queue = {};
		this._theme = null;
		this._themeId = null;
		this._volume = 100;
		this.soundEffectsVolume = 0.5;
	}

	fadeOut() {
		if (!this._theme) {
			return;
		}

		this._isFading = true;
		this._volume = 100;
	}

	mute() {
		this._isMute = !this._isMute;

		if (!this._isMute) {
			this._theme.play();
		} else {
			this._theme.pause();
		}
	}

	pause() {
		if (this._theme) {
			this._theme.pause();
		}
	}

	play(id) {
		if (this._isMute) {
			return;
		}

		this._queue[id] = true;
	}

	playTheme(id) {
		if (id == this._themeId) {
			return;
		}

		if (this._theme && this._theme.currentTime > 0) {
			this._nextThemeName = id;

			if (!this._isFading) {
				this.fadeOut();
			}

			return;
		}

		this.stopTheme();
		this._theme = getElement(id);
		this._themeId = id;

		if (this._theme.currentTime > 0) {
			this._theme.currentTime = 0;
		}

		if (this._isMute) {
			return;
		}

		this._theme.volume = 1;
		this._theme.play();
	}

	resume() {
		if (this._isMute) {
			return;
		}

		if (this._theme?.paused) {
			this._theme.play();
		}
	}

	stopTheme() {
		this._isFading = false;

		if (this._theme) {
			this._theme.pause();
			this._theme.currentTime = 0;
		}
	}

	update() {
		for (let i in this._queue) {
			const SOUND = getElement(i);
			SOUND.pause();

			if (SOUND.currentTime > 0) {
				SOUND.currentTime = 0;
			}

			SOUND.volume = this.soundEffectsVolume;
			SOUND.play();
		}

		this._queue = {};

		if (this._isFading) {
			if (--this._volume > 0) {
				this._theme.volume = this._volume / 100;
			} else {
				this.stopTheme();
				this._isFading = false;
				this._theme = null;

				if (this._nextThemeName) {
					this.playTheme(this._nextThemeName);
					this._themeId = this._nextThemeName;
					this._nextThemeName = null;
				}
			}
		}
	}
}

// Abstract
function SpriteCollection() {
	this.elements = [];
}

SpriteCollection.prototype.getCollision = function(rect) {
	for (let i = 0; i < this.elements.length; ++i) {
		var element = this.elements[i];

		try {
			if (rect.isCollision(element.rect || element.sprite || element.delegate.sprite)) {
				return element;
			}
		} catch (e) {
			console.log(element);
		}
	}

	return null;
};

SpriteCollection.prototype.push = function(element) {
	this.elements.push(element);
};

SpriteCollection.prototype.update = function() {
	var survivors = [];

	for (let i = 0; i < this.elements.length; ++i) {
		var element = this.elements[i];

		if (!element.update()) {
			survivors.push(element);
		}
	}

	this.elements = survivors;
};

function HitBox(owner, point, size, isFragile) {
	this.owner = owner;
	this.point = point;
	this.rect = new Rect(new Point(), size);
	this.isFragile = isFragile || false;
	this.isDying = false;
	game.hitBoxSpriteCollection.push(this);
}

HitBox.prototype.die = function() {
	this.isDying = true;
};

HitBox.prototype.update = function() {
	if (this.isDying) {
		return true;
	}

	this.rect.setLeft(this.owner.sprite.rect.getLeft() + this.point.x);
	this.rect.setTop(this.owner.sprite.rect.getTop() + this.point.y);
};

HitBox.prototype.wound = function() {
	if (this.isFragile && this.owner.wound()) {
		var explosion = new Explosion(ExplosionEnum.SMALL, false);
		explosion.delegate.sprite.setCenter(this.rect.getCenter());
		sound.play("enemyExplosionSound");
		return true;
	}

	sound.play("missSound");

};

// Colors
function Background(rect, fillStyle) {
	this.rect = rect || new Rect(new Point(), new Size(canvas.width, canvas.height));
	this.fillStyle = fillStyle || DEFAULT_FILL_STYLE;
}

Background.prototype.render = function() {
	fillRect(this.rect, this.fillStyle);
};

Background.prototype.setFillStyle = function(fillStyle) {
	this.fillStyle = fillStyle;
};

function LinearGradient(rect, colorStops) {
	var fillStyle = createLinearGradient(rect);

	for (let i in colorStops) {
		var colorStop = colorStops[i];
		fillStyle.addColorStop(colorStop.fraction, colorStop.color);
	}

	return fillStyle;
}

function ColorStop(fraction, color) {
	return {
		"fraction" : fraction || 0,
		"color" : color || DEFAULT_FILL_STYLE
	};
}

function Input() {
	this.keyToCommandMap = KeyToCommandMap;
	this.candidate = null;
	this.controllers = [];
	this.gamepads = 0;
	this.waitKeyboard();
}

Input.prototype.checkGamepads = function() {
	if (getGamepads()[this.gamepads]) {
		if (getGamepads()[this.gamepads].buttons[ButtonEnum.A]) {
			var controller = new Controller (new Gamepad(this.gamepads));
			++this.gamepads;
			this.controllers.push(controller);
		}
	}
};

Input.prototype.getCandidate = function() {
	var candidate = this.candidate;
	this.candidate = null;
	candidate.alloc();
	return candidate;
};

Input.prototype.hasCandidate = function() {
	if (this.candidate == null) {
		return false;
	}

	return true;
};

Input.prototype.resetCandidate = function() {
	if (this.candidate) {
		this.candidate.release();
	}

	this.candidate = null;
};

Input.prototype.setCandidate = function(controller) {
	if (controller.inUse) {
		return false;
	}

	this.candidate = controller;
	return true;
};

Input.prototype.update = function() {
	this.checkGamepads();

	for (let i in this.controllers) {
		var controller = this.controllers[i];
		controller.update();

		if (controller.inUse) {
			if (controller.active[CommandEnum.START] && !controller.held[CommandEnum.START]) {
				game.pause();
			}

			if (controller.active[CommandEnum.MUTE] && !controller.held[CommandEnum.MUTE]) {
				sound.mute();
			}
		} else {
			if (controller.active[CommandEnum.FIRE] && !controller.held[CommandEnum.FIRE]) {
				this.setCandidate(controller);
			}
		}
	}
};

Input.prototype.waitKeyboard = function() {
	var that = this;
	addEventListener("keydown", onKeyDown, false);

	function onKeyDown(event) {
		if (that.keyToCommandMap[event.keyCode] == CommandEnum.FIRE) {
			removeEventListener("keydown", onKeyDown, false);
			var controller = new Controller(new Keyboard(that));
			that.controllers.push(controller);
			that.setCandidate(controller);
		}
	}
};

// class Controller
function Controller(device) {
	this.device = device;
	this.active = {};
	this.held = {};
	this.inUse = false;
}

Controller.prototype.alloc = function() {
	this.inUse = true;
};

Controller.prototype.release = function() {
	this.inUse = false;
};

Controller.prototype.update = function() {
	this.held = {};
	var last = this.active;
	this.active = this.device.getCommands();

	for (let i in this.active) {
		if (last[i]) {
			this.held[i] = true;
		}
	}
};

// class Gamepad
function Gamepad(id) {
	this.id = id || 0;
}

Gamepad.prototype.getCommands = function() {
	var result = {};

	try {
		if (getGamepads()[this.id].axes[AxisEnum.LEFT_Y] < - ANALOG_TRESHOLD) {
			result[CommandEnum.UP] = true;
		} else if (getGamepads()[this.id].axes[AxisEnum.LEFT_Y] > ANALOG_TRESHOLD) {
			result[CommandEnum.DOWN] = true;
		}

		if (getGamepads()[this.id].axes[AxisEnum.LEFT_X] < - ANALOG_TRESHOLD) {
			result[CommandEnum.LEFT] = true;
		} else if (getGamepads()[this.id].axes[AxisEnum.LEFT_X] > ANALOG_TRESHOLD) {
			result[CommandEnum.RIGHT] = true;
		}

		for (let i in ButtonToCommandMap) {
			if (getGamepads()[this.id].buttons[i] && getGamepads()[this.id].buttons[i].pressed) {
				result[ButtonToCommandMap[i]] = true;
			}
		}
	} catch (e) {
		// console.log(e);
	}

	return result;
};

// class Keyboard
function Keyboard(input) {
	var that = this;
	this.input = input;
	this.buffer = {};
	addEventListener("keydown", onKeyDown, false);
	addEventListener("keyup", onKeyUp, false);

	function onKeyDown(event) {
		event.preventDefault();
		onKey(event.keyCode, true);
	}

	function onKeyUp(event) {
		onKey(event.keyCode, false);
	}

	function onKey(keyCode, isDown) {
		that.buffer[that.input.keyToCommandMap[keyCode]] = isDown;
	}
}

Keyboard.prototype.getCommands = function() {
	var result = {};

	for (let i in this.buffer) {
		if (this.buffer[i]) {
			result[i] = true;
		}
	}

	return result;
};

function getGamepads() {
	return navigator.getGamepads && navigator.getGamepads() || [];
}

canvas = document.getElementById("canvas");
context = canvas.getContext("2d");
document.title = NAME;
input = new Input();
game = null;
sound = new Sound();
screen = new Screen();
boot();
